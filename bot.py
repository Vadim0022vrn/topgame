import logging
import asyncio
import mysql.connector
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import CallbackQuery, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
from config.config import API_TOKEN, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
from middlewares.rate_limiter import RateLimiterMiddleware
from utils.database import init_db, add_trainings_to_db, add_businesses_to_db, add_jobs_to_db, add_mining_farms_to_db
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª log.log
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log.log",
    filemode="a"
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
storage = MemoryStorage()
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

dp.message.middleware(RateLimiterMiddleware())
dp.callback_query.middleware(RateLimiterMiddleware())

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from utils.database import init_db, add_trainings_to_db, add_businesses_to_db, add_jobs_to_db
from utils.background_tasks import check_completed_trainings, check_business_accumulation, check_job_accumulation, check_investments, check_level_up
from handlers.start import handle_start, handle_callback_query
from handlers.daily import handle_daily
from handlers.profile import handle_rank, handle_profile, handle_assets
from handlers.help import handle_help, handle_profile_callback, handle_feedback
from config.level import add_experience, calculate_level_progress
from handlers.work import show_available_jobs, handle_get_job, handle_collect_jobs, handle_promote_job, handle_my_job, get_next_job
from handlers.admin import (
    handle_setrank,
    handle_setbalance,
    handle_setlevel,
    handle_resetuser,
    handle_userinfo,
    handle_ban,
    handle_unban,
    handle_givebalance,
    handle_stats,
    handle_topusers,
    handle_addcurrency,
    handle_giveall,
    handle_mod,
    handle_banlist,
    handle_broadcast,
    handle_ticket_list,
    handle_reply_ticket,
    handle_close_ticket,
    handle_showlogs
)
from handlers.referral import handle_myref
from handlers.earnings import (
    handle_education_list,
    handle_start_education_input,
    handle_start_education,
    handle_my_businesses,
    handle_collect_income,
    handle_businesses,
    handle_buy_business,
    handle_upgrade_business,
    handle_buy_business_input,
    handle_sell_business
)
from config.assets import CARS, HOUSES, YACHTS, PLANES, ISLANDS
from config.businesses import BUSINESSES
from config.trainings import TRAININGS
from handlers.bank import (
    handle_deposit,
    handle_withdraw,
    handle_investment,
    handle_claim_investments,
    handle_bank,
    handle_collect_cashback,
    handle_investment_choice,
    handle_investment_amount,
    handle_invalid_amount,
    InvestmentState,
    handle_invests
)
from handlers.car import handle_cars, handle_buycar, handle_sellcar, handle_premium_cars
from handlers.house import handle_houses, handle_buyhouse, handle_sellhouse
from handlers.yachts import handle_yachts, handle_buyyacht, handle_sellyacht
from handlers.top import handle_top, handle_toplevel, handle_toprefs, handle_top_command
from handlers.planes import handle_planes, handle_buyplane, handle_sellplane
from handlers.islands import handle_islands, handle_buyisland, handle_sellisland
from handlers.girls import handle_my_girl, handle_break_up, handle_confirm_break_up, BreakUpStates
from handlers.clothes_handler import handle_clothes, handle_buy_clothes, handle_sell_clothes
from handlers.mining_handlers import handle_view_mining_farms, handle_buy_mining_farm_command, handle_buy_mining_farm, handle_sell_mining_farm, handle_my_mining_farm, handle_collect_mining_income


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
# üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
dp.message.register(handle_start, Command("start")) #—Å—Ç–∞—Ä—Ç/–Ω–∞—á–∞—Ç—å (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
dp.message.register(handle_daily, Command("daily")) #–ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
dp.message.register(handle_rank, Command("rank")) #–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥
dp.message.register(handle_profile, Command("–ø—Ä–æ—Ñ–∏–ª—å")) #–ø—Ä–æ—Ñ–∏–ª—å
dp.message.register(handle_myref, Command("–º–æ–π—Ä–µ—Ñ")) #–ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
dp.message.register(handle_help, Command("help"))                   #–ø–æ–º–æ—â—å
dp.message.register(handle_assets, Command("assets"))   #–ò–º—É—â–µ—Å—Ç–≤–æ
dp.message.register(handle_feedback, Command("feedback"))  #–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç)

dp.message.register(handle_education_list, Command("education_list"))  #–¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
dp.message.register(handle_start_education, Command("startedu"))       #–Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ

dp.message.register(handle_my_businesses, Command("mybiz"))    #–º–æ–∏ –±–∏–∑–Ω–µ—Å—ã
dp.message.register(handle_collect_income, Command("collectbiz"))  #—Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å —Å –±–∏–∑–Ω–µ—Å–∞
dp.message.register(handle_businesses, Command("biz"))      #–¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã
dp.message.register(handle_buy_business, Command("buybiz"))   #–∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å
dp.message.register(handle_upgrade_business, Command("upbiz")) #—É–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å
dp.message.register(handle_sell_business, Command("sellbiz"))   #–ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å

dp.message.register(show_available_jobs, Command("avjobs"))          #–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
dp.message.register(handle_get_job, Command("getjob"))             #—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É
dp.message.register(handle_collect_jobs, Command("collectjob"))  #—Å–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã
dp.message.register(handle_my_job, Command("myjob"))            #–ú–æ—è —Ä–∞–±–æ—Ç–∞
dp.message.register(handle_promote_job, Command("promotejob"))  #–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—ã

dp.message.register(handle_deposit, Command("bankdep"))          #–ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫
dp.message.register(handle_withdraw, Command("bankwith"))          #—Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞
dp.message.register(handle_investment, Command("invest1", "invest2", "invest3", "invest4", "invest5"))  # –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
dp.message.register(handle_claim_investments, Command("claiminvest"))  # –∑–∞–±—Ä–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
dp.message.register(handle_bank, Command("bank"))                      #–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–∞–Ω–∫–∞
dp.message.register(handle_collect_cashback, Command("collcash"))          #–°–æ–±—Ä–∞—Ç—å –∫—ç—à–±–µ–∫
dp.message.register(handle_invests, Command("invests"))                 #–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏

dp.message.register(handle_cars, Command("cars"))  #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ
dp.message.register(handle_buycar, Command("buycar"))    #–ö—É–ø–∏—Ç—å –∞–≤—Ç–æ
dp.message.register(handle_sellcar, Command("sellcar"))  #–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ
dp.message.register(handle_premium_cars, Command("premcar")) #–°–ø–∏—Å–æ–∫ –¥–æ–Ω–∞—Ç –∞–≤—Ç–æ

dp.message.register(handle_houses, Command("houses"))  #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∂–∏–ª—å—è
dp.message.register(handle_buyhouse, Command("buyhouse"))    #–ö—É–ø–∏—Ç—å –∂–∏–ª—å–µ
dp.message.register(handle_sellhouse, Command("sellhouse"))  #–ü—Ä–æ–¥–∞—Ç—å –∂–∏–ª—å–µ

dp.message.register(handle_yachts, Command("yachts"))  #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—Ö—Ç
dp.message.register(handle_buyyacht, Command("buyyachts"))    #–ö—É–ø–∏—Ç—å —è—Ö—Ç—É
dp.message.register(handle_sellyacht, Command("sellyachts"))  #–ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É

dp.message.register(handle_top, Command("top"))  #–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É
dp.message.register(handle_toplevel, Command("toplevel")) #–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é
dp.message.register(handle_toprefs, Command("toprefs")) #–¢–æ–ø –ø–æ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª–∞–º
dp.message.register(handle_top_command, Command("tops")) #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–ø–∞–º

dp.message.register(handle_planes, Command("planes")) #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤
dp.message.register(handle_buyplane, Command("buyplane")) #–ö—É–ø–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç
dp.message.register(handle_sellplane, Command("sellplane")) #–ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç

dp.message.register(handle_islands, Command("islands")) #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤
dp.message.register(handle_buyisland, Command("buyisland")) #–ö—É–ø–∏—Ç—å –æ—Å—Ç—Ä–æ–≤
dp.message.register(handle_sellisland, Command("sellisland")) #–ü—Ä–æ–¥–∞—Ç—å –æ—Å—Ç—Ä–æ–≤

dp.message.register(handle_my_girl, Command("mygirl"))  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –¥–µ–≤—à—É–∫–∏

dp.message.register(handle_clothes, Command("clothes")) #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–¥–µ–∂–¥
dp.message.register(handle_sell_clothes, Command("sellcloth")) #–ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É
dp.message.register(handle_buy_clothes, Command("buycloth"))   #–ü—Ä–æ–¥–∞—Ç—å –æ–¥–µ–∂–¥—É

dp.message.register(handle_view_mining_farms, Command("mining")) # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã
dp.message.register(handle_buy_mining_farm_command, Command("buyminig")) # –ö—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É
dp.message.register(handle_sell_mining_farm, Command("sellmining"))    # –ü—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É
dp.message.register(handle_my_mining_farm, Command("mymining"))      # –ú–æ—è —Ñ–µ—Ä–º–∞
dp.message.register(handle_collect_mining_income, Command("collmining"))  # –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥ —Å —Ñ–µ—Ä–º—ã


# üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
dp.message.register(handle_setrank, Command("setrank"))     # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–≥
dp.message.register(handle_setbalance, Command("setbalance"))# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
dp.message.register(handle_setlevel, Command("setlevel"))  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
dp.message.register(handle_resetuser, Command("resetuser"))# –û–±–Ω—É–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞
dp.message.register(handle_userinfo, Command("userinfo"))  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
dp.message.register(handle_ban, Command("ban"))            # –ë–∞–Ω
dp.message.register(handle_unban, Command("unban"))        # –†–∞–∑–±–∞–Ω
dp.message.register(handle_givebalance, Command("givebalance"))   # –í—ã–¥–∞—Ç—å –¥–µ–Ω–µ–≥
dp.message.register(handle_giveall, Command("giveall"))    #  –í—ã–¥–∞—Ç—å –¥–µ–Ω–µ–≥ –≤—Å–µ–º
dp.message.register(handle_stats, Command("stats"))        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
dp.message.register(handle_topusers, Command("topusers"))   # –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤
dp.message.register(handle_addcurrency, Command("addcurrency")) # –í—ã–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
dp.message.register(handle_mod, Command("mod"))          # –í—ã–¥–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
dp.message.register(handle_banlist, Command("banlist"))    # –ë–∞–Ω–ª–∏—Å—Ç
dp.message.register(handle_showlogs, Command("showlogs"))     # –í—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
dp.message.register(handle_broadcast, Command("broadcast"))    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
dp.message.register(handle_ticket_list, Command("ticketlist"))  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–∫–µ—Ç—ã
dp.message.register(handle_reply_ticket, Command("replyticket"))# –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç
dp.message.register(handle_close_ticket, Command("closeticket"))# –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç (–µ—Å–ª–∏ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞)

dp.message.register(handle_investment_choice, lambda message: message.text in ["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 1", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 2", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 3", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 4", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 5"])
dp.message.register(handle_investment_amount, InvestmentState.waiting_for_amount, lambda message: message.text.isdigit())
dp.message.register(handle_invalid_amount, InvestmentState.waiting_for_amount)
dp.message.register(handle_start_education_input, lambda message: message.text.isdigit())
dp.message.register(handle_buy_business_input, lambda message: message.text.startswith("b_"))

dp.callback_query.register(handle_profile_callback, lambda c: c.data == "profile")
dp.callback_query.register(handle_callback_query)

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É")
async def handle_buy_mining_farm_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–µ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>mining_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, mining_2):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@dp.message(lambda message: message.text.startswith("mining_"))
async def handle_buy_mining_farm_input(message: types.Message, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–µ—Ä–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        farm_id_str = message.text.split("_")[1]  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ "_" –∏ –±–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
        farm_id = int(farm_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ñ–µ—Ä–º—ã
        await handle_buy_mining_farm(message, farm_id)

    except (IndexError, ValueError):
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç "_" –∏–ª–∏ ID –Ω–µ —á–∏—Å–ª–æ)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: mining_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, mining_2)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ñ–µ—Ä–º—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ñ–µ—Ä–º—ã.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ñ–µ—Ä–º
    await handle_view_mining_farms(message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º state

@dp.message(lambda message: message.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã")
async def handle_view_mining_farmsbutton(message: types.Message, state: FSMContext):
    await handle_view_mining_farms(message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º state

@dp.message(lambda message: message.text == "üëï –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É")
async def handle_buy_clothes_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –æ–¥–µ–∂–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>clothes_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, clothes_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text.startswith("clothes_"))
async def handle_buy_clothes_input(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–¥–µ–∂–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        clothes_id_str = message.text.split("_")[1]  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ "_" –∏ –±–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
        clothes_id = int(clothes_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –æ–¥–µ–∂–¥—ã
        await handle_buy_clothes(message, clothes_id)

    except (IndexError, ValueError):
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç "_" –∏–ª–∏ ID –Ω–µ —á–∏—Å–ª–æ)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: clothes_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, clothes_1)")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã
        await handle_clothes(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ–¥–µ–∂–¥—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ–¥–µ–∂–¥—ã.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã
        await handle_clothes(message)

@dp.message(lambda message: message.text == "üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É")
async def handle_sell_mining_farmbutton(message: types.Message):
    await handle_sell_mining_farm(message)

@dp.message(lambda message: message.text == "üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥")
async def handle_collect_mining_incomebutton(message: types.Message):
    await handle_collect_mining_income(message)

@dp.message(lambda message: message.text == "üí∞ –ú–æ—è —Ñ–µ—Ä–º–∞")
async def handle_my_mining_farmbutton(message: types.Message):
    await handle_my_mining_farm(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üëï –ü—Ä–æ–¥–∞—Ç—å –æ–¥–µ–∂–¥—É"
@dp.message(lambda message: message.text == "üëï –ü—Ä–æ–¥–∞—Ç—å –æ–¥–µ–∂–¥—É")
async def handle_sell_clothes_button(message: types.Message):
    await handle_sell_clothes(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üëï –ü—Ä–æ–¥–∞—Ç—å –æ–¥–µ–∂–¥—É"
@dp.message(lambda message: message.text == "üëï –í—ã–±—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É")
async def handle_clothes_button(message: types.Message):
    await handle_clothes(message)

@dp.message(lambda message: message.text == "üè¢ –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å")
async def handle_buy_business_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –±–∏–∑–Ω–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>b_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, b_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text == "üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ")
async def handle_buy_car_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>car_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, car_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text.startswith("car_"))
async def handle_buy_car_input(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        car_id_str = message.text.split("_")[1]  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ "_" –∏ –±–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
        car_id = int(car_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        await handle_buycar(message, car_id)
    except (IndexError, ValueError):
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç "_" –∏–ª–∏ ID –Ω–µ —á–∏—Å–ª–æ)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: car_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, car_1)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")

@dp.message(lambda message: message.text == "üè† –ö—É–ø–∏—Ç—å –¥–æ–º")
async def handle_buy_house_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>house_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, house_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text.startswith("house_"))
async def handle_buy_house_input(message: types.Message):
    try:
        house_id_str = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–º–∞
        house_id = int(house_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        await handle_buyhouse(message, house_id)  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –¥–æ–º–∞
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: house_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, house_1)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ–º–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ–º–∞.")

@dp.message(lambda message: message.text == "üèù –ö—É–ø–∏—Ç—å –æ—Å—Ç—Ä–æ–≤")
async def handle_buy_island_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –æ—Å—Ç—Ä–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>island_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, island_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text.startswith("island_"))
async def handle_buy_island_input(message: types.Message):
    try:
        island_id_str = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Å—Ç—Ä–æ–≤–∞
        island_id = int(island_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        await handle_buyisland(message, island_id)  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: island_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, island_1)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Å—Ç—Ä–æ–≤–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Å—Ç—Ä–æ–≤–∞.")

@dp.message(lambda message: message.text == "‚úàÔ∏è –ö—É–ø–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç")
async def handle_buy_plane_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —Å–∞–º–æ–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>plane_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, plane_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text.startswith("plane_"))
async def handle_buy_plane_input(message: types.Message):
    try:
        plane_id_str = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–∞–º–æ–ª–µ—Ç–∞
        plane_id = int(plane_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        await handle_buyplane(message, plane_id)  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Å–∞–º–æ–ª–µ—Ç–∞
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: plane_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, plane_1)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–∞–º–æ–ª–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–∞–º–æ–ª–µ—Ç–∞.")

@dp.message(lambda message: message.text == "üö§ –ö—É–ø–∏—Ç—å —è—Ö—Ç—É")
async def handle_buy_yacht_prompt(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —è—Ö—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>yacht_–Ω–æ–º–µ—Ä</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, yacht_1):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.text.startswith("yacht_"))
async def handle_buy_yacht_input(message: types.Message):
    try:
        yacht_id_str = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è—Ö—Ç—ã
        yacht_id = int(yacht_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        await handle_buyyacht(message, yacht_id)  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —è—Ö—Ç—ã
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: yacht_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, yacht_1)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —è—Ö—Ç—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —è—Ö—Ç—ã.")



@dp.message(lambda message: message.text == "üíº –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É")
async def handle_get_job_button(message: types.Message):
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ä–∞–±–æ—Ç—É (id = 1 –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É)
        job_id = 1

        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /getjob —Å ID —Ä–∞–±–æ—Ç—ã
        await handle_get_job(message, job_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É': {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–∞ —Ä–∞–±–æ—Ç—É.")

dp.message.register(handle_break_up, lambda message: message.text == "üíî –ë—Ä–æ—Å–∏—Ç—å –¥–µ–≤—É—à–∫—É")
dp.message.register(handle_confirm_break_up, BreakUpStates.confirm_break_up)
dp.message.register(handle_my_girl, lambda message: message.text == "üë© –î–µ–≤—É—à–∫–∞")

@dp.message(lambda message: message.text == "üèÜ –¢–û–ü—ã")
async def handle_top_command_button(message: types.Message):
    await handle_top_command(message)

@dp.message(lambda message: message.text == "üèÜ –¢–û–ü –±–æ–≥–∞—á–µ–π")
async def handle_top_rich_button(message: types.Message):
    await handle_top(message)

@dp.message(lambda message: message.text == "üéØ –¢–û–ü —É—Ä–æ–≤–Ω–µ–π")
async def handle_top_level_button(message: types.Message):
    await handle_toplevel(message)

@dp.message(lambda message: message.text == "üë• –¢–û–ü —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
async def handle_top_refs_button(message: types.Message):
    await handle_toprefs(message)

# –ü–æ–≤—ã—à–µ–Ω–∏–µ
@dp.message(lambda message: message.text == "‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ")
async def handle_promote_job_button(message: types.Message):
    await handle_promote_job(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ"
@dp.message(lambda message: message.text == "üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ")
async def handle_choose_car(message: types.Message):
    await handle_cars(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üöó –ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ"
@dp.message(lambda message: message.text == "üöó –ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ")
async def handle_sell_car(message: types.Message):
    await handle_sellcar(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üè† –í—ã–±—Ä–∞—Ç—å –¥–æ–º"
@dp.message(lambda message: message.text == "üè† –í—ã–±—Ä–∞—Ç—å –¥–æ–º")
async def handle_choose_house(message: types.Message):
    await handle_houses(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üè† –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"
@dp.message(lambda message: message.text == "üè† –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º")
async def handle_sell_house(message: types.Message):
    await handle_sellhouse(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚úàÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç"
@dp.message(lambda message: message.text == "‚úàÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç")
async def handle_choose_plane(message: types.Message):
    await handle_planes(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚úàÔ∏è –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç"
@dp.message(lambda message: message.text == "‚úàÔ∏è –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç")
async def handle_sell_plane(message: types.Message):
    await handle_sellplane(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõ•Ô∏è –í—ã–±—Ä–∞—Ç—å —è—Ö—Ç—É"
@dp.message(lambda message: message.text == "üõ•Ô∏è –í—ã–±—Ä–∞—Ç—å —è—Ö—Ç—É")
async def handle_choose_yacht(message: types.Message):
    await handle_yachts(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõ•Ô∏è –ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É"
@dp.message(lambda message: message.text == "üõ•Ô∏è –ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É")
async def handle_sell_yacht(message: types.Message):
    await handle_sellyacht(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üèùÔ∏è –í—ã–±—Ä–∞—Ç—å –æ—Å—Ç—Ä–æ–≤"
@dp.message(lambda message: message.text == "üèùÔ∏è –í—ã–±—Ä–∞—Ç—å –æ—Å—Ç—Ä–æ–≤")
async def handle_choose_island(message: types.Message):
    await handle_islands(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üèùÔ∏è –ü—Ä–æ–¥–∞—Ç—å –æ—Å—Ç—Ä–æ–≤"
@dp.message(lambda message: message.text == "üèùÔ∏è –ü—Ä–æ–¥–∞—Ç—å –æ—Å—Ç—Ä–æ–≤")
async def handle_sell_island(message: types.Message):
    await handle_sellisland(message)

@dp.message(lambda message: message.text == "üí∏ –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å")
async def handle_sell_business_button(message: types.Message):
    await handle_sell_business(message)

@dp.message(lambda message: message.text == "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å")
async def handle_upgrade_businessbutton(message: types.Message):
    await handle_upgrade_business(message)

@dp.message(lambda message: message.text == "üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å")
async def handle_collect_income_button(message: types.Message):
    await handle_collect_income(message)

@dp.message(lambda message: message.text == "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å")
async def handle_businesses_button(message: types.Message):
    await handle_businesses(message)

@dp.message(lambda message: message.text == "üè† –ò–º—É—â–µ—Å—Ç–≤–æ")
async def handle_assets_button(message: types.Message):
    await handle_assets(message)

@dp.message(lambda message: message.text == "‚Äº –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    await handle_help(message)

@dp.message(lambda message: message.text == "üìö –ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ")
async def handle_start_education_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(lambda message: message.text == "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
async def handle_invests1(message: types.Message):
    await handle_invests(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 1"
@dp.message(lambda message: message.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 1")
async def handle_invest1_button(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—é 1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 2"
@dp.message(lambda message: message.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 2")
async def handle_invest2_button(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—é 2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 3"
@dp.message(lambda message: message.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 3")
async def handle_invest3_button(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—é 3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 4"
@dp.message(lambda message: message.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 4")
async def handle_invest4_button(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—é 4. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 5"
@dp.message(lambda message: message.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 5")
async def handle_invest5_button(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—é 5. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:")

@dp.message(lambda message: message.text == "üè¶ –ë–∞–Ω–∫")
async def handle_bank_button(message: types.Message):
    await handle_bank(message)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /bank

@dp.message(lambda message: message.text == "üí≥ –°–æ–±—Ä–∞—Ç—å –∫—ç—à–±–µ–∫")
async def handle_collect_cashback_button(message: types.Message):
    await handle_collect_cashback(message)

@dp.message(lambda message: message.text == "‚õî –£–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã")
async def handle_quit_job1(message: types.Message):
    await handle_quit_job(message)

@dp.message(lambda message: message.text == "üíº –†–∞–±–æ—Ç–∞")
async def handle_my_job1(message: types.Message):
    await handle_my_job(message)

@dp.message(lambda message: message.text == "üíµ –°–æ–±—Ä–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É")
async def handle_collect_jobs1(message: types.Message):
    await handle_collect_jobs(message)

@dp.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile1(message: types.Message):
    await handle_profile(message)

@dp.message(lambda message: message.text == "üìñ –°–ø–∏—Å–æ–∫ –æ–±—É—á–µ–Ω–∏–π")
async def handle_education_list1(message: types.Message):
    await handle_education_list(message)

@dp.message(lambda message: message.text == "üè¢ –ë–∏–∑–Ω–µ—Å")
async def handle_my_businesses1(message: types.Message):
    await handle_my_businesses(message)

@dp.message(lambda message: message.text == "üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
async def show_available_jobs1(message: types.Message):
    await show_available_jobs(message)

@dp.message(lambda message: message.text == "üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")
async def handle_myref1(message: types.Message):
    await handle_myref(message)

@dp.message(lambda message: message.text == "üí∞ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å")
async def handle_daily1(message: types.Message):
    await handle_daily(message)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_wrapper(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
    await handle_start(message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º state






logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@dp.message()
async def log_all_messages(message: types.Message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    await init_db()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞—Ö...")
    await add_trainings_to_db()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã education
    logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–∞—Ö...")
    await add_jobs_to_db()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã jobs
    logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–∞—Ö...")
    await add_businesses_to_db()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã businesses
    logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞—Ö...")
    await add_mining_farms_to_db()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã mining_farms
    logger.info("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏.")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    logger.info("üîí –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)

    await bot.session.close()
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await on_startup()
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–π
        asyncio.create_task(check_completed_trainings(bot))
        asyncio.create_task(check_business_accumulation(bot))
        asyncio.create_task(check_job_accumulation(bot))
        asyncio.create_task(check_investments(bot))
        asyncio.create_task(check_level_up(bot))

        logger.info("üöÄ –ë–æ—Ç –Ω–∞—á–∞–ª polling.")
        await dp.start_polling(bot, skip_updates=True)
    except asyncio.CancelledError:
        logger.warning("‚ö†Ô∏è Polling –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")