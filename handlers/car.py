import logging
from aiogram import Router, types
from aiogram.types import Message
from aiogram.filters import Command
from utils.database import execute_db_query
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.profile import handle_assets
from config.assets import CARS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("cars"))
async def handle_cars(message: Message):
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT level FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_level = result[0][0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (—Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ, –Ω–µ –ø—Ä–µ–º–∏—É–º)
        available_cars = [
            f"{car_id} - <b>{car['name']} - –¶–µ–Ω–∞: {car['price']}</b> üí∞"
            for car_id, car in CARS.items()
            if car['level_required'] <= user_level and not car.get('is_premium', False)  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        ]
        
        if not available_cars:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return

        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cars_list = "\n\n".join(available_cars)
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n{cars_list}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        next_car = None
        for car_id, car in CARS.items():
            if car['level_required'] > user_level and not car.get('is_premium', False):  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–∏
                next_car = car
                break

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        if next_car:
            next_car_message = (
                f"\n\nüöÄ <b>–°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ:</b> {next_car['name']}\n"
                f"üîì <b>–î–æ—Å—Ç—É–ø–Ω–æ —Å —É—Ä–æ–≤–Ω—è:</b> {next_car['level_required']}\n"
                f"üíµ <b>–¶–µ–Ω–∞:</b> {next_car['price']} üí∞\n\n"
                f"–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª—É—á—à–µ–µ –∞–≤—Ç–æ! üöó‚ú®"
            )
            await message.answer(next_car_message, parse_mode="HTML")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ")],
                [KeyboardButton(text="üöó –ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏: {e}")

@router.message(Command("premium_cars"))
async def handle_premium_cars(message: Message):
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT level FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_level = result[0][0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        premium_cars = [
            f"{car_id} - <b>{car['name']} - –¶–µ–Ω–∞: {car['price']} Aurix</b>"
            for car_id, car in CARS.items()
            if car.get('is_premium', False) and car['level_required'] <= user_level  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        ]
        
        if not premium_cars:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return

        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cars_list = "\n\n".join(premium_cars)
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n\n{cars_list}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöó –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–∏: {e}")
        

async def handle_buycar(message: types.Message, car_id: int):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        user_exists = await execute_db_query(
            "SELECT id FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not user_exists:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        user_db_id = user_exists[0][0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID
        if car_id not in CARS:
            await message.answer("‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        car = CARS[car_id]
        car_name = car["name"]
        car_price = car["price"]
        level_required = car["level_required"]
        is_premium = car.get("is_premium", False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–µ–º–∏—É–º–Ω—ã–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_level = await execute_db_query(
            "SELECT level FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not user_level:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        user_level = user_level[0][0]
        if user_level < level_required:
            await message.answer(f"‚ö†Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {level_required}. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è)
        if is_premium:
            # –î–ª—è –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–ø–∏—Å—ã–≤–∞–µ–º Aurix
            user_balance = await execute_db_query(
                "SELECT aurix FROM users WHERE user_id = %s",
                (user_id,)
            )
            currency_name = "Aurix"
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            user_balance = await execute_db_query(
                "SELECT balance FROM users WHERE user_id = %s",
                (user_id,)
            )
            currency_name = "üíµ"

        if not user_balance:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        user_balance = user_balance[0][0]
        if user_balance < car_price:
            await message.answer(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency_name} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        user_car = await execute_db_query(
            "SELECT car FROM users WHERE user_id = %s",
            (user_id,)
        )
        if user_car and user_car[0][0]:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            return

        # –ü–æ–∫—É–ø–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞)
        if is_premium:
            # –î–ª—è –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–ø–∏—Å—ã–≤–∞–µ–º Aurix
            await execute_db_query(
                "UPDATE users SET car = %s, aurix = aurix - %s WHERE user_id = %s",
                (car_id, car_price, user_id)
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            await execute_db_query(
                "UPDATE users SET car = %s, balance = balance - %s WHERE user_id = %s",
                (car_id, car_price, user_id)
            )

        await message.answer(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å ¬´{car_name}¬ª –∑–∞ {car_price}{currency_name}!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    await handle_assets(message)

@router.message(Command("sellcar"))
async def handle_sellcar(message: Message):
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT car, experience FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))

        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_car, user_experience = result[0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        if not user_car:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ–≥–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å
        car = CARS.get(user_car)

        if not car:
            await message.answer("–û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        car_name = car["name"]
        car_price = car["price"]
        sell_price = int(car_price * 0.4)  # 40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        sell_experience = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)

        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        update_query = """
            UPDATE users 
            SET car = NULL, 
                balance = balance + %s, 
                experience = experience + %s 
            WHERE user_id = %s
        """
        await execute_db_query(update_query, (sell_price, sell_experience, user_id))

        await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {car_name} –∑–∞ {sell_price} üí∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ {sell_experience} –æ–ø—ã—Ç–∞!")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–∞–ª {car_name} –∑–∞ {sell_price} üí∞ –∏ –ø–æ–ª—É—á–∏–ª {sell_experience} XP.")
        await handle_assets(message)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
