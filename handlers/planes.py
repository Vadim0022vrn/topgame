import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from utils.database import execute_db_query
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.profile import handle_assets
from config.assets import PLANES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("planes"))
async def handle_planes(message: Message):
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT level FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_level = result[0][0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤
        available_planes = [
            f"{plane_id} - <b>{plane['name']} - –¶–µ–Ω–∞: {plane['price']}</b> üí∞"
            for plane_id, plane in PLANES.items()
            if plane['level_required'] <= user_level
        ]
        
        if not available_planes:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return

        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤
        planes_list = "\n\n".join(available_planes)
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–º–æ–ª–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n{planes_list}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∞–º–æ–ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        next_plane = None
        for plane_id, plane in PLANES.items():
            if plane['level_required'] > user_level:
                next_plane = plane
                break

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º —Å–∞–º–æ–ª–µ—Ç–µ
        if next_plane:
            next_plane_message = (
                f"\n\n‚úàÔ∏è <b>–°–ª–µ–¥—É—é—â–∏–π —Å–∞–º–æ–ª–µ—Ç:</b> {next_plane['name']}\n"
                f"üîì <b>–î–æ—Å—Ç—É–ø–µ–Ω —Å —É—Ä–æ–≤–Ω—è:</b> {next_plane['level_required']}\n"
                f"üíµ <b>–¶–µ–Ω–∞:</b> {next_plane['price']} üí∞\n\n"
                f"–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Å–∞–º–æ–ª–µ—Ç—ã! üõ´‚ú®"
            )
            await message.answer(next_plane_message, parse_mode="HTML")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úàÔ∏è –ö—É–ø–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç")],
                [KeyboardButton(text="‚úàÔ∏è –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤.")
        
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ–ª–µ—Ç–æ–≤.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–º–æ–ª–µ—Ç—ã: {e}")

@router.message(Command("buyplane"))
async def handle_buyplane(message: Message, plane_id: int):
    try:
        user_id = message.from_user.id

        if plane_id not in PLANES:
            await message.answer("–°–∞–º–æ–ª–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤
            return

        plane = PLANES[plane_id]
        plane_name = plane["name"]
        plane_price = plane["price"]
        level_required = plane["level_required"]
        cashback_amount = int(plane_price * 0.02)  # 2% –∫–µ—à–±—ç–∫–∞
        experience_gain = 100  # –û–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, –±–∞–ª–∞–Ω—Å, —Ç–µ–∫—É—â–∏–π —Å–∞–º–æ–ª–µ—Ç, –æ–ø—ã—Ç –∏ –∫–µ—à–±—ç–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT level, balance, airplane, experience, cashback FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤
            return
        
        user_level, user_balance, user_plane, user_experience, user_cashback = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∞–º–æ–ª–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_plane:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤
            return
        
        if user_level < level_required:
            await message.answer(f"–≠—Ç–æ—Ç —Å–∞–º–æ–ª–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å {level_required} —É—Ä–æ–≤–Ω—è.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤
            return
        
        if user_balance < plane_price:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Å–∞–º–æ–ª–µ—Ç–∞.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤
            return
        
        # –í—ã—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–æ–ª–µ—Ç, –Ω–∞—á–∏—Å–ª—è–µ–º –∫–µ—à–±—ç–∫ –∏ –æ–ø—ã—Ç
        update_query = """
            UPDATE users 
            SET balance = balance - %s, 
                airplane = %s, 
                experience = experience + %s, 
                cashback = cashback + %s 
            WHERE user_id = %s
        """
        await execute_db_query(update_query, (plane_price, plane_id, experience_gain, cashback_amount, user_id))
        
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {plane_name} –∑–∞ {plane_price} üí∞!\n"
                             f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {experience_gain} –æ–ø—ã—Ç–∞ –∏ {cashback_amount} üí∞ –∫–µ—à–±—ç–∫–∞.")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª {plane_name} –∑–∞ {plane_price} üí∞. "
                    f"–ü–æ–ª—É—á–µ–Ω–æ {experience_gain} XP –∏ {cashback_amount} üí∞ –∫–µ—à–±—ç–∫–∞.")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–∞–º–æ–ª–µ—Ç–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ —Å–∞–º–æ–ª–µ—Ç–∞: {e}")

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤
    await handle_assets(message)

@router.message(Command("sellplane"))
async def handle_sellplane(message: Message):
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–∞–º–æ–ª–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT airplane, experience FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))

        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_plane, user_experience = result[0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∞–º–æ–ª–µ—Ç
        if not user_plane:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–º–æ–ª–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ–≥–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–ª–µ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å
        plane = PLANES.get(user_plane)

        if not plane:
            await message.answer("–û—à–∏–±–∫–∞: —Å–∞–º–æ–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        plane_name = plane["name"]
        plane_price = plane["price"]
        sell_price = int(plane_price * 0.4)  # 40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ–ª–µ—Ç–∞
        sell_experience = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É

        # –£–±–∏—Ä–∞–µ–º —Å–∞–º–æ–ª–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        update_query = """
            UPDATE users 
            SET airplane = NULL, 
                balance = balance + %s, 
                experience = experience + %s 
            WHERE user_id = %s
        """
        await execute_db_query(update_query, (sell_price, sell_experience, user_id))

        await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {plane_name} –∑–∞ {sell_price} üí∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ {sell_experience} –æ–ø—ã—Ç–∞!")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–∞–ª {plane_name} –∑–∞ {sell_price} üí∞ –∏ –ø–æ–ª—É—á–∏–ª {sell_experience} XP.")
        await handle_assets(message)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Å–∞–º–æ–ª–µ—Ç–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ —Å–∞–º–æ–ª–µ—Ç–∞: {e}")