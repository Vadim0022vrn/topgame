import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from utils.database import execute_db_query
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.profile import handle_assets
from config.assets import YACHTS

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("yachts"))
async def handle_yachts(message: Message):
    try:
        user_id = message.from_user.id
        query = "SELECT level FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_level = result[0][0]
        available_yachts = [
            f"{yacht_id} - <b>{yacht['name']} - –¶–µ–Ω–∞: {yacht['price']}</b> üí∞"
            for yacht_id, yacht in YACHTS.items()
            if yacht['level_required'] <= user_level
        ]
        
        if not available_yachts:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—Ö—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return
        
        yachts_list = "\n\n".join(available_yachts)
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è—Ö—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n{yachts_list}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —è—Ö—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        next_yacht = None
        for yacht_id, yacht in YACHTS.items():
            if yacht['level_required'] > user_level:
                next_yacht = yacht
                break

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π —è—Ö—Ç–µ
        if next_yacht:
            next_yacht_message = (
                f"\n\nüö§ <b>–°–ª–µ–¥—É—é—â–∞—è —è—Ö—Ç–∞:</b> {next_yacht['name']}\n"
                f"üîì <b>–î–æ—Å—Ç—É–ø–Ω–∞ —Å —É—Ä–æ–≤–Ω—è:</b> {next_yacht['level_required']}\n"
                f"üíµ <b>–¶–µ–Ω–∞:</b> {next_yacht['price']} üí∞\n\n"
                f"–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —è—Ö—Ç—ã! üåä‚ú®"
            )
            await message.answer(next_yacht_message, parse_mode="HTML")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üö§ –ö—É–ø–∏—Ç—å —è—Ö—Ç—É")],
                [KeyboardButton(text="üö§ –ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—Ö—Ç.")
        
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —è—Ö—Ç.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è—Ö—Ç—ã: {e}")

@router.message(Command("buyyacht"))
async def handle_buyyacht(message: Message, yacht_id: int):
    try:
        user_id = message.from_user.id

        if yacht_id not in YACHTS:
            await message.answer("–Ø—Ö—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —è—Ö—Ç
            return

        yacht = YACHTS[yacht_id]
        yacht_name = yacht["name"]
        yacht_price = yacht["price"]
        level_required = yacht["level_required"]
        cashback_amount = int(yacht_price * 0.02)
        experience_gain = 150

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, –±–∞–ª–∞–Ω—Å, —Ç–µ–∫—É—â—É—é —è—Ö—Ç—É, –æ–ø—ã—Ç –∏ –∫–µ—à–±—ç–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT level, balance, yacht, experience, cashback FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —è—Ö—Ç
            return
        
        user_level, user_balance, user_yacht, user_experience, user_cashback = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —è—Ö—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_yacht:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —è—Ö—Ç–∞. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —è—Ö—Ç
            return
        
        if user_level < level_required:
            await message.answer(f"–≠—Ç–∞ —è—Ö—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å {level_required} —É—Ä–æ–≤–Ω—è.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —è—Ö—Ç
            return
        
        if user_balance < yacht_price:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —è—Ö—Ç—ã.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —è—Ö—Ç
            return
        
        # –í—ã—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —è—Ö—Ç—É, –Ω–∞—á–∏—Å–ª—è–µ–º –∫–µ—à–±—ç–∫ –∏ –æ–ø—ã—Ç
        update_query = """
            UPDATE users 
            SET balance = balance - %s, 
                yacht = %s, 
                experience = experience + %s, 
                cashback = cashback + %s 
            WHERE user_id = %s
        """
        await execute_db_query(update_query, (yacht_price, yacht_id, experience_gain, cashback_amount, user_id))
        
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {yacht_name} –∑–∞ {yacht_price} üí∞!\n"
                             f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {experience_gain} –æ–ø—ã—Ç–∞ –∏ {cashback_amount} üí∞ –∫–µ—à–±—ç–∫–∞.")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª {yacht_name} –∑–∞ {yacht_price} üí∞. "
                    f"–ü–æ–ª—É—á–µ–Ω–æ {experience_gain} XP –∏ {cashback_amount} üí∞ –∫–µ—à–±—ç–∫–∞.")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —è—Ö—Ç—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ —è—Ö—Ç—ã: {e}")

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —è—Ö—Ç
    await handle_assets(message)

@router.message(Command("sellyacht"))
async def handle_sellyacht(message: Message):
    try:
        user_id = message.from_user.id
        query = "SELECT yacht, experience FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_yacht, user_experience = result[0]
        
        if not user_yacht:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —è—Ö—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ—ë.")
            return
        
        yacht = YACHTS.get(user_yacht)
        
        if not yacht:
            await message.answer("–û—à–∏–±–∫–∞: —è—Ö—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        yacht_name = yacht["name"]
        yacht_price = yacht["price"]
        sell_price = int(yacht_price * 0.4)
        sell_experience = 75
        
        update_query = """
            UPDATE users 
            SET yacht = NULL, 
                balance = balance + %s, 
                experience = experience + %s 
            WHERE user_id = %s
        """
        await execute_db_query(update_query, (sell_price, sell_experience, user_id))
        
        await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {yacht_name} –∑–∞ {sell_price} üí∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ {sell_experience} –æ–ø—ã—Ç–∞!")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–∞–ª {yacht_name} –∑–∞ {sell_price} üí∞ –∏ –ø–æ–ª—É—á–∏–ª {sell_experience} XP.")
        await handle_assets(message)
        
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —è—Ö—Ç—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ —è—Ö—Ç—ã: {e}")
