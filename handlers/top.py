from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.database import execute_db_query
import logging

logger = logging.getLogger(__name__)

async def handle_top(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top. –í—ã–≤–æ–¥–∏—Ç –¢–û–ü-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤
        query = '''
            SELECT user_id, username, balance, bank
            FROM users
            ORDER BY (balance + bank) DESC
            LIMIT 10
        '''
        top_players = await execute_db_query(query)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        user_id = message.from_user.id
        query = '''
            SELECT user_id, username, balance, bank
            FROM users
            WHERE user_id = %s
        '''
        current_player = await execute_db_query(query, (user_id,))

        if not current_player:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        current_player = current_player[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¢–û–ü-10
        message_text = "üèÜ –¢–û–ü-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for i, (user_id, username, balance, bank) in enumerate(top_players, start=1):
            message_text += f"{i}. {username} (ID: {user_id})\n"
            message_text += f"   üíµ –ë–∞–ª–∞–Ω—Å: {balance}\n"
            message_text += f"   üè¶ –ë–∞–Ω–∫: {bank}\n"
            message_text += f"   üí∞ –ò—Ç–æ–≥–æ: {balance + bank}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        query = '''
            SELECT COUNT(*) + 1
            FROM users
            WHERE (balance + bank) > (%s + %s)
        '''
        current_player_rank = await execute_db_query(query, (current_player[2], current_player[3]))
        current_player_rank = current_player_rank[0][0] if current_player_rank else 1

        message_text += f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {current_player_rank}\n"
        message_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_player[2]}\n"
        message_text += f"üè¶ –í–∞—à –±–∞–Ω–∫: {current_player[3]}\n"
        message_text += f"üí∞ –ò—Ç–æ–≥–æ: {current_player[2] + current_player[3]}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(message_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¢–û–ü–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.")


async def handle_toplevel(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /toplevel. –í—ã–≤–æ–¥–∏—Ç –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
        query = '''
            SELECT user_id, username, level
            FROM users
            ORDER BY level DESC
            LIMIT 10
        '''
        top_players = await execute_db_query(query)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        user_id = message.from_user.id
        query = '''
            SELECT user_id, username, level
            FROM users
            WHERE user_id = %s
        '''
        current_player = await execute_db_query(query, (user_id,))

        if not current_player:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        current_player = current_player[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¢–û–ü-10
        message_text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:\n\n"
        for i, (user_id, username, level) in enumerate(top_players, start=1):
            message_text += f"{i}. {username} (ID: {user_id})\n"
            message_text += f"   üéØ –£—Ä–æ–≤–µ–Ω—å: {level}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        query = '''
            SELECT COUNT(*) + 1
            FROM users
            WHERE level > %s
        '''
        current_player_rank = await execute_db_query(query, (current_player[2],))
        current_player_rank = current_player_rank[0][0] if current_player_rank else 1

        message_text += f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {current_player_rank}\n"
        message_text += f"üéØ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_player[2]}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(message_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¢–û–ü–∞ –ø–æ —É—Ä–æ–≤–Ω—é: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.")


async def handle_toprefs(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /toprefs. –í—ã–≤–æ–¥–∏—Ç –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        query = '''
            SELECT user_id, username, reffer
            FROM users
            ORDER BY reffer DESC
            LIMIT 10
        '''
        top_players = await execute_db_query(query)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        user_id = message.from_user.id
        query = '''
            SELECT user_id, username, reffer
            FROM users
            WHERE user_id = %s
        '''
        current_player = await execute_db_query(query, (user_id,))

        if not current_player:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        current_player = current_player[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¢–û–ü-10
        message_text = "üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n"
        for i, (user_id, username, reffer) in enumerate(top_players, start=1):
            message_text += f"{i}. {username} (ID: {user_id})\n"
            message_text += f"   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {reffer}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        query = '''
            SELECT COUNT(*) + 1
            FROM users
            WHERE reffer > %s
        '''
        current_player_rank = await execute_db_query(query, (current_player[2],))
        current_player_rank = current_player_rank[0][0] if current_player_rank else 1

        message_text += f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {current_player_rank}\n"
        message_text += f"üë• –í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {current_player[2]}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(message_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¢–û–ü–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.")


async def handle_top_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top. –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèÜ –¢–û–ü –±–æ–≥–∞—á–µ–π"), KeyboardButton(text="üéØ –¢–û–ü —É—Ä–æ–≤–Ω–µ–π")],
                [KeyboardButton(text="üë• –¢–û–ü —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="‚Äº –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –¢–û–ü–æ–≤!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
            "- üèÜ –¢–û–ü –±–æ–≥–∞—á–µ–π: –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É.\n"
            "- üéØ –¢–û–ü —É—Ä–æ–≤–Ω–µ–π: –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é.\n"
            "- üë• –¢–û–ü —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /top: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
