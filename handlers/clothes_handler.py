from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from utils.database import execute_db_query
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config.clothes import CLOTHES
import logging

logger = logging.getLogger("handlers.clothes")
router = Router()

@router.message(Command("clothes"))
async def handle_clothes(message: Message):
    try:
        user_id = message.from_user.id
        query = "SELECT level, yacht, island FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_level, user_yacht, user_island = result[0]
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è NULL, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ 0
        user_yacht = user_yacht if user_yacht is not None else 0
        user_island = user_island if user_island is not None else 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–¥–µ–∂–¥—ã (is_premium=False)
        all_available_clothes = [
            (clothes_id, clothes)
            for clothes_id, clothes in CLOTHES.items()
            if clothes['is_premium'] is False and
               user_level >= clothes['level_required'] and
               user_yacht >= clothes['yacht_level_required'] and
               user_island >= clothes['island_level_required']
        ]
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–¥–µ–∂–¥—ã
        available_clothes = all_available_clothes[-4:] if all_available_clothes else []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
        clothes_list = []
        for clothes_id, clothes in available_clothes:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–æ–Ω—É—Å–∞–º–∏
            bonuses = []
            if "experience" in clothes["bonus"]:
                bonuses.append(f"–û–ø—ã—Ç +{int(clothes['bonus']['experience'] * 100)}%")
            if "income" in clothes["bonus"]:
                bonuses.append(f"–î–æ—Ö–æ–¥ +{int(clothes['bonus']['income'] * 100)}%")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            bonus_text = f" ({', '.join(bonuses)})" if bonuses else ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–¥–µ–∂–¥–æ–π
            clothes_str = f"{clothes_id}. <b>{clothes['name']}</b> - {clothes['price']} üí∞{bonus_text}\n\n"
            clothes_list.append(clothes_str)
        
        if clothes_list:
            clothes_list_text = "\n".join(clothes_list)
            await message.answer(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –æ–¥–µ–∂–¥–∞:\n\n{clothes_list_text}")
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è, —è—Ö—Ç—ã –∏–ª–∏ –æ—Å—Ç—Ä–æ–≤–∞.")
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã (is_premium=False)
        next_clothes = None
        for clothes_id, clothes in CLOTHES.items():
            if clothes['is_premium'] is False and (
                user_level < clothes['level_required'] or
                user_yacht < clothes['yacht_level_required'] or
                user_island < clothes['island_level_required']
            ):
                next_clothes = clothes
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –æ–¥–µ–∂–¥–µ
        if next_clothes:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–æ–Ω—É—Å–∞–º–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–¥–µ–∂–¥—ã
            bonuses = []
            if "experience" in next_clothes["bonus"]:
                bonuses.append(f"–û–ø—ã—Ç +{int(next_clothes['bonus']['experience'] * 100)}%")
            if "income" in next_clothes["bonus"]:
                bonuses.append(f"–î–æ—Ö–æ–¥ +{int(next_clothes['bonus']['income'] * 100)}%")
            
            bonus_text = f" ({', '.join(bonuses)})" if bonuses else ""
            
            next_clothes_message = (
                f"\n\nüëï <b>–°–ª–µ–¥—É—é—â–∞—è –æ–¥–µ–∂–¥–∞:</b> {next_clothes['name']}{bonus_text}\n"
                f"üîì <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b>\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å: {next_clothes['level_required']} (–í–∞—à: {user_level})\n"
                f"üõ• –Ø—Ö—Ç–∞: {next_clothes['yacht_level_required']} (–í–∞—à: {user_yacht})\n"
                f"üèù –û—Å—Ç—Ä–æ–≤: {next_clothes['island_level_required']} (–í–∞—à: {user_island})\n"
                f"üíµ <b>–¶–µ–Ω–∞:</b> {next_clothes['price']} üí∞\n\n"
                f"–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —è—Ö—Ç—É –∏–ª–∏ –æ—Å—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –æ–¥–µ–∂–¥—É! üëó‚ú®"
            )
            await message.answer(next_clothes_message, parse_mode="HTML")

            keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üëï –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É")],
                [KeyboardButton(text="üëï –ü—Ä–æ–¥–∞—Ç—å –æ–¥–µ–∂–¥—É")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–¥–µ–∂–¥—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–¥–µ–∂–¥—É: {e}")


@router.message(Command("buyclothes"))
async def handle_buy_clothes(message: Message, clothes_id: int):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–¥–µ–∂–¥–∞ —Å —Ç–∞–∫–∏–º ID
        if clothes_id not in CLOTHES:
            await message.answer("–û–¥–µ–∂–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        clothes = CLOTHES[clothes_id]
        clothes_name = clothes["name"]
        clothes_price = clothes["price"]
        is_premium = clothes["is_premium"]
        level_required = clothes["level_required"]
        yacht_level_required = clothes["yacht_level_required"]
        island_level_required = clothes["island_level_required"]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = """
            SELECT level, yacht, island, balance, aurix, clothes 
            FROM users 
            WHERE user_id = %s
        """
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await handle_clothes(message)
            return
        
        user_level, user_yacht, user_island, user_balance, user_aurix, user_clothes = result[0]

        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è NULL, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ 0
        user_yacht = user_yacht if user_yacht is not None else 0
        user_island = user_island if user_island is not None else 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ–¥–µ–∂–¥–∞
        if user_clothes is not None:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–µ–∂–¥–∞. –ü—Ä–æ–¥–∞–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é.")
            await handle_clothes(message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å, —è—Ö—Ç—É –∏ –æ—Å—Ç—Ä–æ–≤
        if user_level < level_required:
            await message.answer(f"–≠—Ç–∞ –æ–¥–µ–∂–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å {level_required} —É—Ä–æ–≤–Ω—è.")
            await handle_clothes(message)
            return
        if user_yacht < yacht_level_required:
            await message.answer(f"–î–ª—è —ç—Ç–æ–π –æ–¥–µ–∂–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —è—Ö—Ç–∞ —É—Ä–æ–≤–Ω—è {yacht_level_required}.")
            await handle_clothes(message)
            return
        if user_island < island_level_required:
            await message.answer(f"–î–ª—è —ç—Ç–æ–π –æ–¥–µ–∂–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç—Ä–æ–≤ —É—Ä–æ–≤–Ω—è {island_level_required}.")
            await handle_clothes(message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–ª–∏ Aurix –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–¥–µ–∂–¥—ã
        if is_premium:
            if user_aurix < clothes_price:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Aurix –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –æ–¥–µ–∂–¥—ã.")
                await handle_clothes(message)
                return
        else:
            if user_balance < clothes_price:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –æ–¥–µ–∂–¥—ã.")
                await handle_clothes(message)
                return

        # –í—ã—á–∏—Å–ª—è–µ–º cashback (2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–µ–∂–¥—ã)
        cashback = int(clothes_price * 0.02)

        # –û–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É (–≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
        experience_reward = 50  # –ü—Ä–∏–º–µ—Ä: 50 –æ–ø—ã—Ç–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_premium:
            update_query = """
                UPDATE users 
                SET clothes = %s, aurix = aurix - %s, cashback = cashback + %s, experience = experience + %s 
                WHERE user_id = %s
            """
        else:
            update_query = """
                UPDATE users 
                SET clothes = %s, balance = balance - %s, cashback = cashback + %s, experience = experience + %s 
                WHERE user_id = %s
            """
        
        await execute_db_query(update_query, (clothes_id, clothes_price, cashback, experience_reward, user_id))

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {clothes_name} –∑–∞ {clothes_price} {'Aurix' if is_premium else 'üí∞'}!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª {clothes_name} –∑–∞ {clothes_price} {'Aurix' if is_premium else 'üí∞'}.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã
        await handle_clothes(message)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ–¥–µ–∂–¥—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ –æ–¥–µ–∂–¥—ã: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await handle_clothes(message)

@router.message(Command("sellclothes"))
async def handle_sell_clothes(message: Message):
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT clothes FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_clothes = result[0][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–µ–∂–¥–∞
        if user_clothes is None:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–¥–µ–∂–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–µ–∂–¥–µ
        clothes = CLOTHES.get(user_clothes)
        if not clothes:
            await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–¥–µ–∂–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        clothes_name = clothes["name"]
        clothes_price = clothes["price"]

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–µ–∂–¥—ã)
        sell_price = int(clothes_price * 0.3)

        # –û–ø—ã—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É (–≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
        experience_reward = 20  # –ü—Ä–∏–º–µ—Ä: 20 –æ–ø—ã—Ç–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_query = """
            UPDATE users 
            SET clothes = NULL, balance = balance + %s, experience = experience + %s 
            WHERE user_id = %s
        """
        await execute_db_query(update_query, (sell_price, experience_reward, user_id))

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ
        await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {clothes_name} –∑–∞ {sell_price} üí∞.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–∞–ª {clothes_name} –∑–∞ {sell_price} üí∞.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã
        await handle_clothes(message)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –æ–¥–µ–∂–¥—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ –æ–¥–µ–∂–¥—ã: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–¥–µ–∂–¥—ã
        await handle_clothes(message)

