import asyncio
import logging
from utils.database import execute_db_query
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime, timedelta
from aiogram.filters.command import CommandObject
from utils.income_utils import calculate_income_with_bonus
from config.level import add_experience
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

router = Router()

logger = logging.getLogger(__name__)

async def handle_deposit(message: types.Message, amount: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞.
    """
    user_id = message.from_user.id

    if not message.text.split(' ', 1)[1:]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /deposit 1000")
        return

    amount = message.text.split(' ', 1)[1]
    if not amount.isdigit():
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    amount = int(amount)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    query_balance_check = "SELECT balance FROM users WHERE user_id = %s"
    balance_result = await execute_db_query(query_balance_check, (message.from_user.id,))

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    if not balance_result or balance_result[0][0] < amount:  # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
        return

    # –¢—É—Ç –≤—ã–∑–æ–≤–µ—à—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
    await transfer_to_bank(message.from_user.id, amount)

    await message.answer(f"‚úÖ –í –±–∞–Ω–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} üí∞")

async def transfer_to_bank(user_id: int, amount: int):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–Ω–∫"""
    query = """
        UPDATE users
        SET bank = bank + %s, balance = balance - %s
        WHERE user_id = %s AND balance >= %s
    """
    await execute_db_query(query, (amount, amount, user_id, amount))


async def handle_withdraw(message: types.Message, amount: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å –±–∞–Ω–∫–∞.
    """
    user_id = message.from_user.id

    if not message.text.split(' ', 1)[1:]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /withdraw 1000")
        return

    amount = message.text.split(' ', 1)[1]
    if not amount.isdigit():
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    amount = int(amount)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ
    query_bank_check = "SELECT bank FROM users WHERE user_id = %s"
    bank_result = await execute_db_query(query_bank_check, (message.from_user.id,))

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    if not bank_result or bank_result[0][0] < amount:  # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –¥–ª—è —Å–Ω—è—Ç–∏—è!")
        return

    # –¢—É—Ç –≤—ã–∑–æ–≤–µ—à—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥
    await withdraw_from_bank(message.from_user.id, amount)

    await message.answer(f"‚úÖ –°–æ —Å—á–µ—Ç–∞ —Å–Ω—è—Ç–æ {amount} üí∞")

async def withdraw_from_bank(user_id: int, amount: int):
    """–°–Ω–∏–º–∞–µ—Ç –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –Ω–∞ –±–∞–ª–∞–Ω—Å"""
    query = """
        UPDATE users
        SET bank = bank - %s, balance = balance + %s
        WHERE user_id = %s AND bank >= %s
    """
    await execute_db_query(query, (amount, amount, user_id, amount))


INVESTMENT_PLANS = {
    "invest1": (1, 7),   # 1 —á–∞—Å - 5%
    "invest2": (12, 15), # 12 —á–∞—Å–æ–≤ - 15%
    "invest3": (24, 25), # 24 —á–∞—Å–∞ - 25%
    "invest4": (72, 50), # 3 –¥–Ω—è - 50%
    "invest5": (168, 100) # 7 –¥–Ω–µ–π - 100%
}

async def handle_investment(message: types.Message, investment_type: str = None, amount: int = None):
    try:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if investment_type is None or amount is None:
            command_parts = message.text.split()
            if len(command_parts) != 2 or not command_parts[1].isdigit():
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–∫–æ–º–∞–Ω–¥–∞ —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /invest1 1000)")
                return
            
            investment_type = command_parts[0][1:]  # –£–±–∏—Ä–∞–µ–º '/'
            amount = int(command_parts[1])
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ handle_investment
        if investment_type not in INVESTMENT_PLANS:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è
        active_investment_query = """
            SELECT id FROM investments WHERE user_id = %s AND claimed = FALSE
        """
        active_investment = await execute_db_query(active_investment_query, (message.from_user.id,))
        
        if active_investment:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è! –°–Ω–∞—á–∞–ª–∞ –∑–∞–±–µ—Ä–∏—Ç–µ –µ—ë –ø—Ä–∏–±—ã–ª—å.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        duration, profit_percent = INVESTMENT_PLANS[investment_type]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤–ª–æ–∂–µ–Ω–∏—è)
        base_profit = round(amount * (profit_percent / 100))

        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞)
        bonus_percent = calculate_income_with_bonus(message.from_user.id, base_profit)
        logger.info(f"–ë–æ–Ω—É—Å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {bonus_percent}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –∫ –ø—Ä–∏–±—ã–ª–∏
        bonus_amount = round(base_profit * bonus_percent)

        # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å = –±–∞–∑–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å + –±–æ–Ω—É—Å
        total_profit = base_profit + bonus_amount

        logger.info(f"–ü—Ä–∏–±—ã–ª—å —Å –±–æ–Ω—É—Å–æ–º: {total_profit}")

        end_time = datetime.now() + timedelta(hours=duration)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        check_balance = "SELECT bank FROM users WHERE user_id = %s"
        result = await execute_db_query(check_balance, (message.from_user.id,))
        if not result or result[0][0] < amount:  # result[0][0] - –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ!")
            return
        
        # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ –±–∞–Ω–∫–∞
        update_balance = "UPDATE users SET bank = bank - %s WHERE user_id = %s"
        await execute_db_query(update_balance, (amount, message.from_user.id))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        insert_query = """
            INSERT INTO investments (user_id, amount, profit, end_time, claimed)
            VALUES (%s, %s, %s, %s, FALSE)
        """
        await execute_db_query(insert_query, (message.from_user.id, amount, total_profit, end_time))

        await message.answer(f"–í—ã –≤–ª–æ–∂–∏–ª–∏ {amount} üí∞ –Ω–∞ {duration} —á. –î–æ—Ö–æ–¥: +{total_profit} üí∞ (—Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–∞). –ó–∞–±—Ä–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ {end_time.strftime('%Y-%m-%d %H:%M:%S')}.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.")
        print(f"–û—à–∏–±–∫–∞: {e}")

async def handle_claim_investments(message: Message):
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        check_query = """
            SELECT id, amount, profit FROM investments
            WHERE user_id = %s AND end_time <= NOW() AND claimed = FALSE
        """
        results = await execute_db_query(check_query, (user_id,))
        
        if not results:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞.")
            return
        
        # –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å (amount + profit)
        total_profit = sum(row[1] + row[2] for row in results)  # row[1] = amount, row[2] = profit
        investment_ids = tuple(row[0] for row in results)  # row[0] = id
        
        # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ calculate_income_with_bonus, —Ç–∞–∫ –∫–∞–∫ –±–æ–Ω—É—Å —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        total_profit_with_bonus = total_profit  # –ë–æ–Ω—É—Å —É–∂–µ —É—á—Ç–µ–Ω –≤ profit

        # –û–ø—ã—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é)
        exp_earned = round(total_profit_with_bonus * 0.05)  # 5% –æ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∏–¥–µ –æ–ø—ã—Ç–∞

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ 'claimed'
        update_query = f"UPDATE investments SET claimed = TRUE WHERE id IN ({','.join(['%s'] * len(investment_ids))})"
        await execute_db_query(update_query, investment_ids)

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        delete_query = f"DELETE FROM investments WHERE id IN ({','.join(['%s'] * len(investment_ids))})"
        await execute_db_query(delete_query, investment_ids)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–Ω–∫ –∏ –æ–ø—ã—Ç –≤ experience
        update_balance = "UPDATE users SET bank = bank + %s, experience = experience + %s WHERE user_id = %s"
        await execute_db_query(update_balance, (total_profit_with_bonus, exp_earned, user_id))
        
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ {total_profit_with_bonus} üí∞ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!\n"
                             f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {exp_earned} –æ–ø—ã—Ç–∞! üéØ")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def handle_bank(message: types.Message):
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ, –∫—ç—à–±–µ–∫–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        user_query = '''
            SELECT bank, cashback, solix FROM users WHERE user_id = %s
        '''
        user_result = await execute_db_query(user_query, (user_id,))

        if not user_result:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        bank_balance, cashback, solix = user_result[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã investments
        investments_query = '''
            SELECT SUM(amount), SUM(profit) FROM investments WHERE user_id = %s AND claimed = FALSE
        '''
        investments_result = await execute_db_query(investments_query, (user_id,))

        if investments_result and investments_result[0][0] is not None:
            total_invested, total_profit = investments_result[0]
        else:
            total_invested, total_profit = 0, 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –∫—ç—à–±–µ–∫–µ
        bank_info = (
            f"üè¶ <b>–í–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç:</b>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{bank_balance}</b>\n"
            f"üí≥ –ö—ç—à–±–µ–∫: <b>{cashback}</b>\n"
            f"üíé Solix: <b>{solix}</b> (–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)\n"
            f"üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: <b>{total_invested}</b> (–æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{total_profit}</b>)\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±–∞–Ω–∫–∞
        await message.answer(bank_info, parse_mode="HTML", reply_markup=get_bank_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ.")

def get_bank_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –±–∞–Ω–∫–∞.
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],  # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
            [KeyboardButton(text="üí≥ –°–æ–±—Ä–∞—Ç—å –∫—ç—à–±–µ–∫")],  # –ö–Ω–æ–ø–∫–∞ "–°–æ–±—Ä–∞—Ç—å –∫—ç—à–±–µ–∫"
            [KeyboardButton(text="üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")],  # –ö–Ω–æ–ø–∫–∞ "–°–æ–±—Ä–∞—Ç—å –∫—ç—à–±–µ–∫"
        ],
        resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    )
    return keyboard



async def handle_collect_cashback(message: types.Message):
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cashback_query = '''
            SELECT cashback FROM users WHERE user_id = %s
        '''
        cashback_result = await execute_db_query(cashback_query, (user_id,))

        if not cashback_result:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        cashback = cashback_result[0][0]

        if cashback <= 0:
            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–±–µ–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω—É–ª—è–µ–º –∫—ç—à–±–µ–∫
        update_query = '''
            UPDATE users 
            SET balance = balance + %s, cashback = 0 
            WHERE user_id = %s
        '''
        await execute_db_query(update_query, (cashback, user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç: 1 –æ–ø—ã—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 5$ —Å–Ω—è—Ç—ã—Ö
        experience_to_add = cashback // 5  # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 5
        if experience_to_add > 0:
            new_level, total_experience, level_increased = await add_experience(user_id, experience_to_add)
            if level_increased:
                await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–±–æ—Ä–µ –∫—ç—à–±–µ–∫–∞
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –∫—ç—à–±–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {cashback} üí∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ {experience_to_add} –æ–ø—ã—Ç–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫—ç—à–±–µ–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫—ç—à–±–µ–∫–∞.")



async def handle_invests(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /invests. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    try:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        invest_info = (
            "üìà <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</b>\n\n"
            "1. <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 1</b>: 1 —á–∞—Å, 5% –ø—Ä–∏–±—ã–ª–∏.\n"
            "2. <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 2</b>: 12 —á–∞—Å–æ–≤, 15% –ø—Ä–∏–±—ã–ª–∏.\n"
            "3. <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 3</b>: 24 —á–∞—Å–∞, 25% –ø—Ä–∏–±—ã–ª–∏.\n"
            "4. <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 4</b>: 3 –¥–Ω—è, 50% –ø—Ä–∏–±—ã–ª–∏.\n"
            "5. <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 5</b>: 7 –¥–Ω–µ–π, 100% –ø—Ä–∏–±—ã–ª–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é:"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 1"), KeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 2")],
                [KeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 3"), KeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 4")],
                [KeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 5")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(invest_info, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
class InvestmentState(StatesGroup):
    waiting_for_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    investment_type = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
async def handle_investment_choice(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        investment_type = message.text
        await state.update_data(investment_type=investment_type)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        await state.set_state(InvestmentState.waiting_for_amount)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {investment_type}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async def handle_investment_amount(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        amount = int(message.text)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        investment_type = data.get("investment_type")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è handle_investment –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        investment_commands = {
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 1": "invest1",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 2": "invest2",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 3": "invest3",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 4": "invest4",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è 5": "invest5",
        }

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        command = investment_commands.get(investment_type)
        if not command:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º handle_investment —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await handle_investment(message, investment_type=command, amount=amount)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_bank_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_invalid_amount(message: types.Message):
    await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


