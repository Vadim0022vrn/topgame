from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import execute_db_query
from config.girls import GIRLS
from handlers.profile import handle_assets
import logging
import random

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è
class BreakUpStates(StatesGroup):
    confirm_break_up = State()

def format_bonuses(bonuses):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–Ω—É—Å—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    –ü—Ä–∏–º–µ—Ä: {'income': 0.05, 'experience': 0.03} -> "–î–æ—Ö–æ–¥ +5%, –û–ø—ã—Ç +3%"
    """
    if not bonuses:
        return "–ù–µ—Ç –±–æ–Ω—É—Å–æ–≤"
    
    formatted_bonuses = []
    for bonus_type, value in bonuses.items():
        if bonus_type == "income":
            formatted_bonuses.append(f"–î–æ—Ö–æ–¥ +{int(value * 100)}%")
        elif bonus_type == "experience":
            formatted_bonuses.append(f"–û–ø—ã—Ç +{int(value * 100)}%")
    
    return ", ".join(formatted_bonuses)

async def handle_my_girl(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –¥–µ–≤—É—à–∫–µ –∏–≥—Ä–æ–∫–∞.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–µ–≤—É—à–∫—É –∏–≥—Ä–æ–∫–∞
        girl_data = await execute_db_query(
            "SELECT girlfriend FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not girl_data or not girl_data[0][0]:
            await message.answer("üò¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–≤—É—à–∫–∏.")
            return

        girl_id = girl_data[0][0]
        girl_info = GIRLS[girl_id]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã
        bonuses_text = format_bonuses(girl_info['bonus'])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üíî –ë—Ä–æ—Å–∏—Ç—å –¥–µ–≤—É—à–∫—É")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"üë© –í–∞—à–∞ –¥–µ–≤—É—à–∫–∞: {girl_info['name']}\n"
            f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã –Ω–∞ –¥–µ–≤—É—à–∫—É: {girl_info['monthly_cost']}üíµ\n"
            f"üéÅ –ë–æ–Ω—É—Å—ã: {bonuses_text}\n\n"
            f"‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è, {girl_info['name']} –º–æ–∂–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥ –∏ –æ—Ç—Å—É–¥–∏—Ç—å —É –≤–∞—Å —á–∞—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–æ—Ç 7% –¥–æ 15% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞).",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–≤—É—à–∫–µ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–≤—É—à–∫–µ.")

async def handle_break_up(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë—Ä–æ—Å–∏—Ç—å –¥–µ–≤—É—à–∫—É". –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–µ–≤—É—à–∫—É –∏–≥—Ä–æ–∫–∞
        girl_data = await execute_db_query(
            "SELECT girlfriend FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not girl_data or not girl_data[0][0]:
            await message.answer("üò¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–≤—É—à–∫–∏.")
            return

        girl_id = girl_data[0][0]
        girl_info = GIRLS[girl_id]

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è —Å {girl_info['name']}?\n"
            f"–û–Ω–∞ –º–æ–∂–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥ –∏ –æ—Ç—Å—É–¥–∏—Ç—å —É –≤–∞—Å —á–∞—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–æ—Ç 7% –¥–æ 15% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞).\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –∏–ª–∏ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        )
        await state.set_state(BreakUpStates.confirm_break_up)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_confirm_break_up(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è.
    """
    try:
        user_id = message.from_user.id
        user_response = message.text.lower()

        if user_response == "–¥–∞":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            balance_data = await execute_db_query(
                "SELECT balance FROM users WHERE user_id = %s",
                (user_id,)
            )
            if not balance_data:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ.")
                await state.clear()
                return

            balance = balance_data[0][0]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 7% –¥–æ 15%
            breakup_percent = random.randint(7, 15) / 100
            breakup_cost = int(balance * breakup_percent)

            # –£–¥–∞–ª—è–µ–º –¥–µ–≤—É—à–∫—É —É –∏–≥—Ä–æ–∫–∞
            await execute_db_query(
                "UPDATE users SET girlfriend = NULL WHERE user_id = %s",
                (user_id,)
            )

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            await execute_db_query(
                "UPDATE users SET balance = balance - %s WHERE user_id = %s",
                (breakup_cost, user_id)
            )

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª "–ò–º—É—â–µ—Å—Ç–≤–æ"
            await message.answer(
                f"üíî –í—ã —Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å —Å –¥–µ–≤—É—à–∫–æ–π. –û–Ω–∞ –æ–±—Ä–∞—Ç–∏–ª–∞—Å—å –≤ —Å—É–¥ –∏ –æ—Ç—Å—É–¥–∏–ª–∞ —É –≤–∞—Å {breakup_cost}üíµ ({breakup_percent * 100}% –æ—Ç –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞).\n\n"
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance - breakup_cost}üíµ."
            )
            await handle_assets(message)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª "–ò–º—É—â–µ—Å—Ç–≤–æ"
        elif user_response == "–Ω–µ—Ç":
            await message.answer("‚úÖ –†–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–≤—É—à–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–≤—É—à–∫–∏.")
        await state.clear()