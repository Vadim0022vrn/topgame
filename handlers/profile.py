from utils.database import execute_db_query
import logging
from aiogram import types
from datetime import datetime
from config.config import RANKS
from config.assets import CARS
from config.city import CITIES
from config.assets import CARS, HOUSES, YACHTS, PLANES, ISLANDS
from config.girls import GIRLS
from config.clothes import CLOTHES
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.level import calculate_level_progress

logger = logging.getLogger(__name__)

RANK_EMOJIS = {
    **{i: "ü©µ" for i in range(1, 20)},
    20: "üå∏",
    **{i: "üü®" for i in range(21, 26)},
    26: "üü©",
    27: "üü•",
    28: "üîµ",
    29: "üå∏",
    30: "üü•"
}

async def handle_profile(message, user_id=None):
    try:
        user_id = user_id or message.from_user.id
        query = '''
            SELECT id, username, level, rank, experience, balance, bank, solix, aurix, car, registration_date, city, referrer_id, reffer
            FROM users WHERE user_id = %s
        '''
        profile = await execute_db_query(query, (user_id,))

        if profile:
            id_, username, level, rank, experience, balance, bank, solix, aurix, car, registration_date, city_id, referrer_id, reffer = profile[0]
            rank_name = RANKS.get(rank, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            rank_emoji = RANK_EMOJIS.get(rank, "‚ö™")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            current_level, required_experience, progress_percent = calculate_level_progress(user_id)

            if registration_date:
                try:
                    days_in_game = (datetime.now() - datetime.strptime(registration_date, "%Y-%m-%d")).days
                    registration_display = f"{days_in_game} –¥–Ω–µ–π"
                except Exception:
                    registration_display = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã"
            else:
                registration_display = "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å
            has_business = await has_user_business(user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞
            has_job = await has_user_job(user_id)

            car_name = CARS.get(car, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") if car is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            city_name = CITIES.get(city_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") if city_id is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            referrer_info = ""
            if referrer_id:
                referrer_query = 'SELECT username FROM users WHERE user_id = %s'
                referrer_result = await execute_db_query(referrer_query, (referrer_id,))
                if referrer_result:
                    referrer_username = referrer_result[0][0]
                    referrer_info = f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>{referrer_username}</b>\n"

            profile_text = (
                f"\U0001F4DD <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å {username}:</b>\n"
                f"üÜî ID: <b>{id_}</b>\n"
                f"üéØ –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
                f"üèÖ –†–∞–Ω–≥: {rank_emoji} <b>{rank_name} ({rank})</b>\n"
                f"‚ú® –û–ø—ã—Ç: <b>{experience} / {required_experience}</b>\n"
                f"üíµ –ë–∞–ª–∞–Ω—Å: <b>{balance}</b>\n"
                f"üíµ –ë–∞–Ω–∫: <b>{bank}</b>\n"
                f"üíé Solix: <b>{solix}</b> (–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)\n"
                f"üîÆ Aurix: <b>{aurix}</b> (–î–æ–Ω–∞—Ç)\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{car_name}</b>\n"
                f"üèô –ì–æ—Ä–æ–¥: <b>{city_name}</b>\n"
                f"{referrer_info}"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{reffer}</b> –ß–µ–ª–æ–≤–µ–∫.\n"
                f"‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{registration_display} –Ω–∞–∑–∞–¥</b>"
            )

            # –ü–µ—Ä–µ–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞, –Ω–∞–ª–∏—á–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã –≤ get_profile_keyboard
            await message.answer(profile_text, parse_mode="HTML", reply_markup=get_profile_keyboard(level, has_business, has_job))
        else:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")

async def handle_rank(message):
    try:
        user_id = message.from_user.id

        def sync_get_rank():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()
            cursor.execute('SELECT rank FROM users WHERE user_id = %s', (user_id,))
            result = cursor.fetchone()
            connection.close()
            return RANKS.get(result[0], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if result else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        rank = await asyncio.to_thread(sync_get_rank)
        await message.answer(f"üèÖ –í–∞—à —Ä–∞–Ω–≥: {rank}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: {str(e)}")

async def has_user_business(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å.
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    user_db_id = await execute_db_query(
        "SELECT id FROM users WHERE user_id = %s",
        (user_id,)
    )
    
    if not user_db_id:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    user_db_id = user_db_id[0][0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å
    result = await execute_db_query(
        "SELECT business_id FROM user_businesses WHERE user_id = %s",
        (user_db_id,)
    )
    return bool(result)  # True, –µ—Å–ª–∏ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å, –∏–Ω–∞—á–µ False

async def has_user_job(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    user_db_id = await execute_db_query(
        "SELECT id FROM users WHERE user_id = %s",
        (user_id,)
    )
    
    if not user_db_id:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    user_db_id = user_db_id[0][0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞
    result = await execute_db_query(
        "SELECT job_id FROM user_jobs WHERE user_id = %s",
        (user_db_id,)
    )
    return bool(result)  # True, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞, –∏–Ω–∞—á–µ False


def get_profile_keyboard(user_level: int, has_business: bool, has_job: bool) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞, –Ω–∞–ª–∏—á–∏—è –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã.
    """
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = [
        [KeyboardButton(text="üìñ –°–ø–∏—Å–æ–∫ –æ–±—É—á–µ–Ω–∏–π"), KeyboardButton(text="üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã" if not has_job else "üíº –†–∞–±–æ—Ç–∞")]
    ]

    # –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã" –∏–ª–∏ "–ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å" –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 3 —É—Ä–æ–≤–Ω–µ –∏ –≤—ã—à–µ
    if user_level >= 3:
        if has_business:
            buttons.append([KeyboardButton(text="üè¢ –ë–∏–∑–Ω–µ—Å")])  # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å
        else:
            buttons.append([KeyboardButton(text="üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å")])  # –ï—Å–ª–∏ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.extend([
        [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ"), KeyboardButton(text="üè¶ –ë–∞–Ω–∫"), KeyboardButton(text="üèÜ –¢–û–ü—ã")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ò–º—É—â–µ—Å—Ç–≤–æ"
        [KeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å"), KeyboardButton(text="üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚Äº –ü–æ–º–æ—â—å")]
    ])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    )

    return keyboard


#-------------------------------------–ò–ú–£–©–ï–°–¢–í–û----------------------------------


async def get_user_assets(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    assets = {}

    # –ü–æ–ª—É—á–∞–µ–º –±–∏–∑–Ω–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    businesses = await execute_db_query(
        "SELECT b.name, ub.level FROM user_businesses ub "
        "JOIN businesses b ON ub.business_id = b.id "
        "WHERE ub.user_id = (SELECT id FROM users WHERE user_id = %s)",
        (user_id,)
    )
    assets["–±–∏–∑–Ω–µ—Å—ã"] = businesses if businesses else []

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mining_farm = await execute_db_query(
        "SELECT mf.name FROM user_mining_farms umf "
        "JOIN mining_farms mf ON umf.mining_id = mf.id "
        "WHERE umf.user_id = (SELECT id FROM users WHERE user_id = %s)",
        (user_id,)
    )
    assets["–º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞"] = mining_farm[0][0] if mining_farm else "–ù–µ—Ç"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    user_data = await execute_db_query(
        "SELECT house, car, island, yacht, airplane, clothes, animal, girlfriend "
        "FROM users WHERE user_id = %s",
        (user_id,)
    )
    if user_data:
        house_id, car_id, island_id, yacht_id, airplane_id, clothes_id, animal_id, girlfriend_id = user_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞
        assets["–¥–æ–º"] = HOUSES.get(house_id, {}).get("name", "–ù–µ—Ç") if house_id else "–ù–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã
        assets["–º–∞—à–∏–Ω–∞"] = CARS.get(car_id, {}).get("name", "–ù–µ—Ç") if car_id else "–ù–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
        assets["–æ—Å—Ç—Ä–æ–≤"] = ISLANDS.get(island_id, {}).get("name", "–ù–µ—Ç") if island_id else "–ù–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è—Ö—Ç—ã
        assets["—è—Ö—Ç–∞"] = YACHTS.get(yacht_id, {}).get("name", "–ù–µ—Ç") if yacht_id else "–ù–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞
        assets["—Å–∞–º–æ–ª–µ—Ç"] = PLANES.get(airplane_id, {}).get("name", "–ù–µ—Ç") if airplane_id else "–ù–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã
        assets["–æ–¥–µ–∂–¥–∞"] = CLOTHES.get(clothes_id, {}).get("name", "–ù–µ—Ç") if clothes_id else "–ù–µ—Ç"

        # –ñ–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ assets.py, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º "–ù–µ—Ç"
        assets["–∂–∏–≤–æ—Ç–Ω–æ–µ"] = "–ù–µ—Ç" if not animal_id else "–ù–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–≤—É—à–∫–µ
        if girlfriend_id:
            girl = GIRLS.get(girlfriend_id, {})
            assets["–¥–µ–≤—É—à–∫–∞"] = girl.get("name", "–ù–µ—Ç")
        else:
            assets["–¥–µ–≤—É—à–∫–∞"] = "–ù–µ—Ç"

    return assets


async def format_assets_message(assets: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º—É—â–µ—Å—Ç–≤–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    message = "üè∞ <b>–í–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:</b>\n\n"

    # –ë–∏–∑–Ω–µ—Å—ã
    if assets["–±–∏–∑–Ω–µ—Å—ã"]:
        message += "üè¢ <b>–ë–∏–∑–Ω–µ—Å—ã:</b>\n"
        for business in assets["–±–∏–∑–Ω–µ—Å—ã"]:
            message += f"  - {business[0]} (—É—Ä–æ–≤–µ–Ω—å {business[1]})\n"
        message += "\n"
    else:
        message += "üè¢ <b>–ë–∏–∑–Ω–µ—Å—ã:</b> –ù–µ—Ç\n\n"

    # –ú–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞
    message += f"üí∞ <b>–ú–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞:</b> {assets['–º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞']}\n\n"

    # –î–æ–º
    message += f"üè† <b>–î–æ–º:</b> {assets['–¥–æ–º']}\n\n"

    # –ú–∞—à–∏–Ω–∞
    message += f"üöó <b>–ú–∞—à–∏–Ω–∞:</b> {assets['–º–∞—à–∏–Ω–∞']}\n\n"

    # –û—Å—Ç—Ä–æ–≤
    message += f"üèù <b>–û—Å—Ç—Ä–æ–≤:</b> {assets['–æ—Å—Ç—Ä–æ–≤']}\n\n"

    # –Ø—Ö—Ç–∞
    message += f"üõ• <b>–Ø—Ö—Ç–∞:</b> {assets['—è—Ö—Ç–∞']}\n\n"

    # –°–∞–º–æ–ª–µ—Ç
    message += f"‚úàÔ∏è <b>–°–∞–º–æ–ª–µ—Ç:</b> {assets['—Å–∞–º–æ–ª–µ—Ç']}\n\n"

    # –û–¥–µ–∂–¥–∞
    message += f"üëï <b>–û–¥–µ–∂–¥–∞:</b> {assets['–æ–¥–µ–∂–¥–∞']}\n\n"

    # –ñ–∏–≤–æ—Ç–Ω–æ–µ
    message += f"üêæ <b>–ñ–∏–≤–æ—Ç–Ω–æ–µ:</b> {assets['–∂–∏–≤–æ—Ç–Ω–æ–µ']}\n\n"

    # –î–µ–≤—É—à–∫–∞
    message += f"üë© <b>–î–µ–≤—É—à–∫–∞:</b> {assets['–¥–µ–≤—É—à–∫–∞']}\n\n"

    return message


async def handle_assets(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∏–º—É—â–µ—Å—Ç–≤–æ.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–º—É—â–µ—Å—Ç–≤–µ
        assets = await get_user_assets(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = await format_assets_message(assets)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã
        if assets["–º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã"))
        else:
            buttons.append(KeyboardButton(text="üí∞ –ú–æ—è —Ñ–µ—Ä–º–∞"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        if assets["–º–∞—à–∏–Ω–∞"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ"))
        else:
            buttons.append(KeyboardButton(text="üöó –ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–º–∞
        if assets["–¥–æ–º"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üè† –í—ã–±—Ä–∞—Ç—å –¥–æ–º"))
        else:
            buttons.append(KeyboardButton(text="üè† –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∞–º–æ–ª–µ—Ç–∞
        if assets["—Å–∞–º–æ–ª–µ—Ç"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="‚úàÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç"))
        else:
            buttons.append(KeyboardButton(text="‚úàÔ∏è –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —è—Ö—Ç—ã
        if assets["—è—Ö—Ç–∞"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üõ•Ô∏è –í—ã–±—Ä–∞—Ç—å —è—Ö—Ç—É"))
        else:
            buttons.append(KeyboardButton(text="üõ•Ô∏è –ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞
        if assets["–æ—Å—Ç—Ä–æ–≤"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üèùÔ∏è –í—ã–±—Ä–∞—Ç—å –æ—Å—Ç—Ä–æ–≤"))
        else:
            buttons.append(KeyboardButton(text="üèùÔ∏è –ü—Ä–æ–¥–∞—Ç—å –æ—Å—Ç—Ä–æ–≤"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–µ–∂–¥—ã
        if assets["–æ–¥–µ–∂–¥–∞"] == "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üëï –í—ã–±—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É"))
        else:
            buttons.append(KeyboardButton(text="üëï –ü—Ä–æ–¥–∞—Ç—å –æ–¥–µ–∂–¥—É"))

        # –ö–Ω–æ–ø–∫–∞ "–î–µ–≤—É—à–∫–∞", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if assets["–¥–µ–≤—É—à–∫–∞"] != "–ù–µ—Ç":
            buttons.append(KeyboardButton(text="üë© –î–µ–≤—É—à–∫–∞"))

        # –ö–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" –∏ "–ü–æ–º–æ—â—å"
        buttons.append(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
        buttons.append(KeyboardButton(text="‚Äº –ü–æ–º–æ—â—å"))

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–∞—Ä—ã
        paired_buttons = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=paired_buttons,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–Ω–æ–ø–æ–∫
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(message_text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º—É—â–µ—Å—Ç–≤–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–º—É—â–µ—Å—Ç–≤–µ.")