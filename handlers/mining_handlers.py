from aiogram import types, Router
import logging
from config.config import EXPERIENCE_PER_1000_SOLIX
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config.mining import MINING_FARMS  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞—Ö
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.database import execute_db_query
from utils.income_utils import calculate_income_with_bonus
from config.level import add_experience
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º
router = Router()

@router.message(Command("mining_farms"))
async def handle_view_mining_farms(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–µ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —É—Ä–æ–≤–Ω—é, –≥–æ—Ä–æ–¥—É, –¥–æ–º—É –∏ —Å–∞–º–æ–ª–µ—Ç—É.
    –í –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é —Ñ–µ—Ä–º—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.
    –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Ñ–µ—Ä–º—ã –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, –≥–æ—Ä–æ–¥, –¥–æ–º –∏ —Å–∞–º–æ–ª–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data_query = """
            SELECT level, city, house, airplane
            FROM users
            WHERE user_id = %s
        """
        user_data_result = await execute_db_query(user_data_query, (user_id,))
        
        if not user_data_result:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_level, user_city, user_house, user_airplane = user_data_result[0]

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã
        available_farms = []
        unavailable_farms = []
        for farm_id, farm in sorted(MINING_FARMS.items()):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Ñ–µ—Ä–º—ã
            if farm.get("is_premium", False):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–µ—Ä–º–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            if (
                farm["level_required"] <= user_level and
                farm["city_required"] <= user_city and
                farm["house_required"] <= user_house and
                farm["airplane_required"] <= user_airplane
            ):
                available_farms.append((farm_id, farm))
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã
                unavailable_farms.append((farm_id, farm))

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã
        if len(available_farms) > 3:
            available_farms = available_farms[-3:]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ–µ—Ä–º–∞–º–∏
        response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã:\n\n"
        for farm_id, farm in available_farms:
            response += (
                f"üÜî ID: {farm_id}\n"
                f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {farm['name']}\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {farm['base_cost']} üí∞\n"
                f"üìà –î–æ—Ö–æ–¥: {farm['base_income']} üí∞/—á–∞—Å\n"
                f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {farm['max_working_hours']} —á–∞—Å–æ–≤\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–µ—Ä–º –Ω–µ—Ç
        if not available_farms:
            response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º.\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é —Ñ–µ—Ä–º—É
        if unavailable_farms:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é —Ñ–µ—Ä–º—É
            farm_id, farm = unavailable_farms[0]
            response += (
                "üîí –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è —Ñ–µ—Ä–º–∞:\n"
                f"üÜî ID: {farm_id}\n"
                f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {farm['name']}\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {farm['base_cost']} üí∞\n"
                f"üìà –î–æ—Ö–æ–¥: {farm['base_income']} üí∞/—á–∞—Å\n"
                f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {farm['max_working_hours']} —á–∞—Å–æ–≤\n"
                f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: {farm['level_required']} (–≤–∞—à: {user_level})\n"
                f"üèô –¢—Ä–µ–±—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥: {farm['city_required']} (–≤–∞—à: {user_city})\n"
                f"üè† –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–º: {farm['house_required']} (–≤–∞—à: {user_house})\n"
                f"‚úàÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–º–æ–ª–µ—Ç: {farm['airplane_required']} (–≤–∞—à: {user_airplane})\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É")],
                [KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º.")


async def handle_buy_mining_farm(message: types.Message, farm_id: int):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.
    –£ –∏–≥—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–µ—Ä–º–∞. –ï—Å–ª–∏ —Ñ–µ—Ä–º–∞ —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä–º–µ
        farm = MINING_FARMS.get(farm_id)
        if not farm:
            await message.answer("‚ùå –ú–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = """
            SELECT id, level, city, house, airplane, balance, mining FROM users WHERE user_id = %s
        """
        user_result = await execute_db_query(user_query, (user_id,))

        if not user_result:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        user_db_id, user_level, user_city, user_house, user_airplane, user_balance, user_mining = user_result[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ —Ñ–µ—Ä–º–∞
        if user_mining is not None:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–¥–∞–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é, –≥–æ—Ä–æ–¥—É, –¥–æ–º—É –∏ —Å–∞–º–æ–ª–µ—Ç—É
        if user_level < farm["level_required"]:
            await message.answer(f"‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ñ–µ—Ä–º—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {farm['level_required']}.")
            return
        if user_city < farm["city_required"]:
            await message.answer(f"‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ñ–µ—Ä–º—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥ —É—Ä–æ–≤–Ω—è {farm['city_required']}.")
            return
        if user_house < farm["house_required"]:
            await message.answer(f"‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ñ–µ—Ä–º—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–º —É—Ä–æ–≤–Ω—è {farm['house_required']}.")
            return
        if user_airplane < farm["airplane_required"]:
            await message.answer(f"‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ñ–µ—Ä–º—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–º–æ–ª–µ—Ç —É—Ä–æ–≤–Ω—è {farm['airplane_required']}.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_balance < farm["base_cost"]:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ñ–µ—Ä–º—ã.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É user_mining_farms
        insert_mining_farm_query = """
            INSERT INTO user_mining_farms (user_id, mining_id, start_date, last_income_collection)
            VALUES (%s, %s, %s, %s)
        """
        await execute_db_query(insert_mining_farm_query, (user_db_id, farm_id, datetime.now(), datetime.now()))

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ mining –≤ —Ç–∞–±–ª–∏—Ü–µ users
        update_mining_query = """
            UPDATE users SET mining = %s WHERE user_id = %s
        """
        await execute_db_query(update_mining_query, (farm_id, user_id))

        # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–µ—Ä–º—ã –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_balance_query = """
            UPDATE users SET balance = balance - %s WHERE user_id = %s
        """
        await execute_db_query(update_balance_query, (farm["base_cost"], user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–±–µ–∫ (2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã)
        cashback = int(farm["base_cost"] * 0.02)
        update_cashback_query = """
            UPDATE users SET cashback = cashback + %s WHERE user_id = %s
        """
        await execute_db_query(update_cashback_query, (cashback, user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∏–≥—Ä–æ–∫—É (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞)
        experience_to_add = farm["base_cost"] // 1000  # –ü—Ä–∏–º–µ—Ä: 1 –æ–ø—ã—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 1000$ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã
        await add_experience(user_id, experience_to_add)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—É: {farm['name']}!\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {farm['base_cost']} üí∞\n"
            f"üí≥ –ö—ç—à–±–µ–∫: +{cashback} üí∞\n"
            f"üéØ –û–ø—ã—Ç: +{experience_to_add}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /buy_mining_farm
@router.message(Command("buy_mining_farm"))
async def handle_buy_mining_farm_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /buy_mining_farm.
    –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ mining_<ID>.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(" ", 1)
        if len(command_parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /buy_mining_farm mining_<ID> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy_mining_farm mining_2)")
            return

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å —Å ID —Ñ–µ—Ä–º—ã
        farm_input = command_parts[1].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Å "mining_"
        if not farm_input.startswith("mining_"):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_mining_farm mining_<ID> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy_mining_farm mining_2)")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–µ—Ä–º—ã
        farm_id_str = farm_input.split("_")[1]
        if not farm_id_str.isdigit():
            await message.answer("‚ùå ID —Ñ–µ—Ä–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /buy_mining_farm mining_<ID> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy_mining_farm mining_2)")
            return

        farm_id = int(farm_id_str)

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ñ–µ—Ä–º—ã
        await handle_buy_mining_farm(message, farm_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /buy_mining_farm: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


async def handle_sell_mining_farm(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.
    –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã, –∞ —Ç–∞–∫–∂–µ –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ñ–µ—Ä–º—É
        user_query = """
            SELECT id, mining FROM users WHERE user_id = %s
        """
        user_result = await execute_db_query(user_query, (user_id,))

        if not user_result:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        user_db_id, user_mining = user_result[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ñ–µ—Ä–º–∞
        if user_mining is None:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä–º–µ
        farm = MINING_FARMS.get(user_mining)
        if not farm:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π —Ñ–µ—Ä–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º 40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã
        sell_price = int(farm["base_cost"] * 0.4)

        # –ù–∞—á–∏—Å–ª—è–µ–º –∏–≥—Ä–æ–∫—É 40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã
        update_balance_query = """
            UPDATE users SET balance = balance + %s WHERE user_id = %s
        """
        await execute_db_query(update_balance_query, (sell_price, user_id))

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–µ—Ä–º–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_mining_farms
        delete_mining_farm_query = """
            DELETE FROM user_mining_farms WHERE user_id = %s AND mining_id = %s
        """
        await execute_db_query(delete_mining_farm_query, (user_db_id, user_mining))

        # –û–±–Ω—É–ª—è–µ–º –ø–æ–ª–µ mining –≤ —Ç–∞–±–ª–∏—Ü–µ users
        update_mining_query = """
            UPDATE users SET mining = NULL WHERE user_id = %s
        """
        await execute_db_query(update_mining_query, (user_id,))

        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É —Ñ–µ—Ä–º—ã (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞)
        experience_to_add = farm["base_cost"] // 2000  # –ü—Ä–∏–º–µ—Ä: 1 –æ–ø—ã—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 2000$ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã
        await add_experience(user_id, experience_to_add)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—É: {farm['name']}!\n"
            f"üíµ –ü–æ–ª—É—á–µ–Ω–æ: {sell_price} üí∞ (40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n"
            f"üéØ –û–ø—ã—Ç: +{experience_to_add}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.")


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

@router.message(Command("my_mining_farm"))
async def handle_my_mining_farm(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Ñ–µ—Ä–º–µ –∏–≥—Ä–æ–∫–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ, –≤–∫–ª—é—á–∞—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ñ–µ—Ä–º—É
        user_query = """
            SELECT id, mining FROM users WHERE user_id = %s
        """
        user_result = await execute_db_query(user_query, (user_id,))

        if not user_result:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        user_db_id, user_mining = user_result[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ñ–µ—Ä–º–∞
        if user_mining is None:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä–º–µ
        farm = MINING_FARMS.get(user_mining)
        if not farm:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π —Ñ–µ—Ä–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
        mining_farm_query = """
            SELECT last_income_collection 
            FROM user_mining_farms 
            WHERE user_id = %s AND mining_id = %s
        """
        mining_farm_result = await execute_db_query(mining_farm_query, (user_db_id, user_mining))

        if not mining_farm_result or not mining_farm_result[0][0]:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–µ—Ä–º–µ.")
            return

        last_income_collection = mining_farm_result[0][0]
        current_time = datetime.now()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
        time_since_last_collection = current_time - last_income_collection

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã —Ñ–µ—Ä–º—ã
        max_working_hours = farm["max_working_hours"]
        max_accumulation_time = timedelta(hours=max_working_hours)
        if time_since_last_collection > max_accumulation_time:
            time_since_last_collection = max_accumulation_time

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥
        hours_since_last_collection = time_since_last_collection.total_seconds() / 3600
        accumulated_income = int(hours_since_last_collection * farm["base_income"])

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (40% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
        sell_price = int(farm["base_cost"] * 0.4)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–µ—Ä–º–µ
        response = (
            f"üè≠ –í–∞—à–∞ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º–∞:\n\n"
            f"üÜî ID: {user_mining}\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {farm['name']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {farm['base_cost']} üí∞\n"
            f"üìà –î–æ—Ö–æ–¥: {farm['base_income']} solix/—á–∞—Å\n"
            f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {farm['max_working_hours']} —á–∞—Å–æ–≤\n"
            f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: {farm['level_required']}\n"
            f"üèô –¢—Ä–µ–±—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥: {farm['city_required']}\n"
            f"üè† –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–º: {farm['house_required']}\n"
            f"‚úàÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–º–æ–ª–µ—Ç: {farm['airplane_required']}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥: {accumulated_income} solix\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏: {sell_price} üí∞ (40% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥")],
                [KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É"), KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã")],
                [KeyboardButton(text="üè¶ –ë–∞–Ω–∫"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–µ—Ä–º–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–µ—Ä–º–µ.")

async def handle_collect_mining_income(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ —Å –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.
    –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ solix, –∞ –Ω–µ –≤ balance.
    """
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ñ–µ—Ä–º—É
        user_query = """
            SELECT id, mining FROM users WHERE user_id = %s
        """
        user_result = await execute_db_query(user_query, (user_id,))

        if not user_result:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        user_db_id, user_mining = user_result[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ñ–µ—Ä–º–∞
        if user_mining is None:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–µ—Ä–º–µ
        farm = MINING_FARMS.get(user_mining)
        if not farm:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π —Ñ–µ—Ä–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
        mining_farm_query = """
            SELECT last_income_collection 
            FROM user_mining_farms 
            WHERE user_id = %s AND mining_id = %s
        """
        mining_farm_result = await execute_db_query(mining_farm_query, (user_db_id, user_mining))

        if not mining_farm_result or not mining_farm_result[0][0]:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–µ—Ä–º–µ.")
            return

        last_income_collection = mining_farm_result[0][0]
        current_time = datetime.now()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
        time_since_last_collection = current_time - last_income_collection

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã —Ñ–µ—Ä–º—ã
        max_working_hours = farm["max_working_hours"]
        max_accumulation_time = timedelta(hours=max_working_hours)
        if time_since_last_collection > max_accumulation_time:
            time_since_last_collection = max_accumulation_time

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥
        hours_since_last_collection = time_since_last_collection.total_seconds() / 3600
        base_income = int(hours_since_last_collection * farm["base_income"])

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã (–≥–æ—Ä–æ–¥, –¥–µ–≤—É—à–∫–∞, –æ–¥–µ–∂–¥–∞)
        bonus_percent = calculate_income_with_bonus(user_id, base_income)
        total_income_with_bonus = base_income + (base_income * bonus_percent / 100)

        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –≤ solix
        update_solix_query = """
            UPDATE users SET solix = solix + %s WHERE id = %s
        """
        await execute_db_query(update_solix_query, (total_income_with_bonus, user_db_id))

        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç (10 –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥—ã–µ 1000 solix)
        experience_per_1000_solix = 10  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        experience_earned = int(total_income_with_bonus // 1000) * experience_per_1000_solix

        if experience_earned > 0:
            new_level, remaining_experience, level_increased = await add_experience(user_id, experience_earned)

            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if level_increased:
                await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
        update_last_income_collection_query = """
            UPDATE user_mining_farms 
            SET last_income_collection = %s 
            WHERE user_id = %s AND mining_id = %s
        """
        await execute_db_query(update_last_income_collection_query, (current_time, user_db_id, user_mining))

        await message.answer(
            f"üí∞ –í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Ö–æ–¥ —Å –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã: {total_income_with_bonus} solix.\n"
            f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ {experience_earned} –æ–ø—ã—Ç–∞."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞ —Å –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞ —Å –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã.")