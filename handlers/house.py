from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from utils.database import execute_db_query
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.profile import handle_assets
from config.assets import HOUSES
import logging

logger = logging.getLogger("handlers.house")
router = Router()

@router.message(Command("houses"))
async def handle_houses(message: Message):
    try:
        user_id = message.from_user.id
        query = "SELECT level FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_level = result[0][0]
        available_houses = [
            f"{house_id}. <b>{house['name']} - {house['price']}</b> üí∞\n"
            for house_id, house in HOUSES.items() if user_level >= house['level_required']
        ]
        
        if available_houses:
            houses_list = "\n".join(available_houses)
            await message.answer(f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –∂–∏–ª—å–µ:\n\n{houses_list}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            next_house = None
            for house_id, house in HOUSES.items():
                if house['level_required'] > user_level:
                    next_house = house
                    break

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –¥–æ–º–µ
            if next_house:
                next_house_message = (
                    f"\n\nüè† <b>–°–ª–µ–¥—É—é—â–∏–π –¥–æ–º:</b> {next_house['name']}\n"
                    f"üîì <b>–î–æ—Å—Ç—É–ø–µ–Ω —Å —É—Ä–æ–≤–Ω—è:</b> {next_house['level_required']}\n"
                    f"üíµ <b>–¶–µ–Ω–∞:</b> {next_house['price']} üí∞\n\n"
                    f"–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª—É—á—à–µ–µ –∂–∏–ª—å–µ! üè°‚ú®"
                )
                await message.answer(next_house_message, parse_mode="HTML")
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∂–∏–ª—å—è –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè† –ö—É–ø–∏—Ç—å –¥–æ–º")],
                [KeyboardButton(text="üè† –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º")],
                [KeyboardButton(text="üè† –ò–º—É—â–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–∏–ª—å—è.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∂–∏–ª—å–µ: {e}")

@router.message(Command("buyhouse"))
async def handle_buyhouse(message: Message, house_id: int):
    try:
        user_id = message.from_user.id

        if house_id not in HOUSES:
            await message.answer("–ñ–∏–ª—å–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
            return

        house = HOUSES[house_id]
        house_name, house_price, level_required = house["name"], house["price"], house["level_required"]

        query = "SELECT level, balance, house FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
            return
        
        user_level, user_balance, user_house = result[0]
        
        if user_house:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–ª—å–µ. –ü—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
            return
        
        if user_level < level_required:
            await message.answer(f"–≠—Ç–æ –∂–∏–ª—å–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å {level_required} —É—Ä–æ–≤–Ω—è.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
            return
        
        if user_balance < house_price:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∂–∏–ª—å—è.")
            await handle_assets(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
            return
        
        cashback = house_price * 0.02
        exp_reward = 50  # –û–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
        update_query = "UPDATE users SET balance = balance - %s, house = %s, cashback = cashback + %s, experience = experience + %s WHERE user_id = %s"
        await execute_db_query(update_query, (house_price, house_id, cashback, exp_reward, user_id))
        
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {house_name} –∑–∞ {house_price} üí∞!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª {house_name} –∑–∞ {house_price} üí∞.")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∂–∏–ª—å—è.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ –∂–∏–ª—å—è: {e}")

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
    await handle_assets(message)

@router.message(Command("sellhouse"))
async def handle_sellhouse(message: Message):
    try:
        user_id = message.from_user.id
        query = "SELECT house FROM users WHERE user_id = %s"
        result = await execute_db_query(query, (user_id,))
        
        if not result:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        user_house = result[0][0]
        if not user_house:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∂–∏–ª—å—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return
        
        house = HOUSES.get(user_house)
        if not house:
            await message.answer("–û—à–∏–±–∫–∞: –∂–∏–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        house_name, house_price = house["name"], house["price"]
        sell_price = house_price * 0.4
        exp_reward = 20  # –û–ø—ã—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É
        update_query = "UPDATE users SET house = NULL, balance = balance + %s, experience = experience + %s WHERE user_id = %s"
        await execute_db_query(update_query, (sell_price, exp_reward, user_id))
        
        await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {house_name} –∑–∞ {sell_price} üí∞.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–∞–ª {house_name} –∑–∞ {sell_price} üí∞.")
        await handle_assets(message)


    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∂–∏–ª—å—è.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ –∂–∏–ª—å—è: {e}")
