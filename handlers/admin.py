import asyncio
import logging
import html
import chardet
import mysql.connector
from aiogram import types
from config.config import API_TOKEN, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, RANKS
from utils.database import execute_db_query

logger = logging.getLogger(__name__)

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–Ω–≥–∞ 30)
async def is_creator(user_id: int) -> bool:
    def sync_check():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('SELECT rank FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        connection.close()
        return result and result[0] == 30
    return await asyncio.to_thread(sync_check)

# üîù /setrank <id> <rank>
async def handle_setrank(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2 or not all(arg.isdigit() for arg in args):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setrank <id> <rank>")
        return

    user_id, rank = map(int, args)

    if rank < 1 or rank > 30:
        await message.answer("‚ùå –†–∞–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30.")
        return

    def sync_set_rank():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET rank = %s WHERE id = %s', (rank, user_id))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_set_rank)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–≥ {RANKS.get(rank, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({rank}).")

# üí∞ /setbalance <id> <amount>
async def handle_setbalance(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2 or not all(arg.isdigit() for arg in args):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbalance <id> <amount>")
        return

    user_id, amount = map(int, args)

    def sync_set_balance():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET balance = %s WHERE id = %s', (amount, user_id))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_set_balance)
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {amount}üíµ.")

# üéØ /setlevel <id> <level>
async def handle_setlevel(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2 or not all(arg.isdigit() for arg in args):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlevel <id> <level>")
        return

    user_id, level = map(int, args)

    def sync_set_level():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET level = %s WHERE id = %s', (level, user_id))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_set_level)
    await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}.")

# üóë /resetuser <id>
async def handle_resetuser(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /resetuser <id>")
        return

    user_id = int(args[0])

    def sync_reset_user():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('''
            UPDATE users SET 
                balance = 0, level = 1, experience = 0, rank = 1, daily_streak = 0, last_daily = NULL
            WHERE id = %s
        ''', (user_id,))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_reset_user)
    await message.answer(f"‚ôªÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —Å–±—Ä–æ—à–µ–Ω.")

# üîç /userinfo <id>
async def handle_userinfo(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /userinfo <id>")
        return

    user_id = int(args[0])

    def sync_get_user_info():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('SELECT id, username, rank, level, balance, registration_date FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        connection.close()
        return result

    user_info = await asyncio.to_thread(sync_get_user_info)
    if user_info:
        id_, username, rank, level, balance, reg_date = user_info
        await message.answer(
            f"üìù <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
            f"üÜî ID: <b>{id_}</b>\n"
            f"üë§ –ò–º—è: <b>{username}</b>\n"
            f"üèÖ –†–∞–Ω–≥: <b>{RANKS.get(rank, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n"
            f"üéØ –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}üíµ</b>\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{reg_date}</b>",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üö´ /ban <id>
async def handle_ban(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <id>")
        return

    user_id = int(args[0])

    def sync_ban_user():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET rank = 0 WHERE id = %s', (user_id,))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_ban_user)
    await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# ‚úÖ /unban <id>
async def handle_unban(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban <id>")
        return

    user_id = int(args[0])

    def sync_unban_user():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET rank = 1 WHERE id = %s', (user_id,))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_unban_user)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# üíµ /givebalance <id> <amount>
async def handle_givebalance(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2 or not all(arg.isdigit() for arg in args):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /givebalance <id> <amount>")
        return

    user_id, amount = map(int, args)

    def sync_give_balance():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET balance = balance + %s WHERE id = %s', (amount, user_id))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_give_balance)
    await message.answer(f"üíµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}üíµ.")

# üí∏ /giveall <amount>
async def handle_giveall(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /giveall <amount>")
        return

    amount = int(args[0])

    def sync_give_all():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET balance = balance + %s', (amount,))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_give_all)
    await message.answer(f"üí∏ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}üíµ.")

    # üìä /stats ‚Äî –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
async def handle_stats(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    def sync_get_stats():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*), AVG(level), SUM(balance) FROM users")
        total_users, avg_level, total_balance = cursor.fetchone()
        connection.close()
        return total_users, avg_level or 0, total_balance or 0

    total_users, avg_level, total_balance = await asyncio.to_thread(sync_get_stats)
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üéØ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{avg_level:.2f}</b>\n"
        f"üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{total_balance}üíµ</b>",
        parse_mode="HTML"
    )

# üèÜ /topusers <n> ‚Äî –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é
async def handle_topusers(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /topusers <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    limit = int(args[0])

    def sync_get_topusers():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute(
            "SELECT username, level, balance FROM users ORDER BY level DESC, balance DESC LIMIT %s",
            (limit,)
        )
        results = cursor.fetchall()
        connection.close()
        return results

    top_users = await asyncio.to_thread(sync_get_topusers)
    if top_users:
        text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n" + "\n".join(
            [f"{idx+1}. üë§ <b>{username}</b> ‚Äî üéØ {level} lvl ‚Äî üíµ {balance}üíµ" for idx, (username, level, balance) in enumerate(top_users)]
        )
    else:
        text = "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    await message.answer(text, parse_mode="HTML")

# ü™ô /addcurrency <id> <currency> <amount> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def handle_addcurrency(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 3 or not args[0].isdigit() or not args[2].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addcurrency <id> <currency> <amount>")
        return

    user_id, currency, amount = int(args[0]), args[1].lower(), int(args[2])
    allowed_currencies = ["balance", "solix", "aurix", "valorium", "novacoin"]

    if currency not in allowed_currencies:
        await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(allowed_currencies)}")
        return

    def sync_add_currency():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute(f"UPDATE users SET {currency} = {currency} + %s WHERE id = %s", (amount, user_id))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_add_currency)
    await message.answer(f"ü™ô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} {currency}.")

    # üõ° /mod <id> ‚Äî –°–¥–µ–ª–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (26 —É—Ä–æ–≤–µ–Ω—å)
async def handle_mod(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mod <id>")
        return

    user_id = int(args[0])

    def sync_set_mod():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('UPDATE users SET rank = 26 WHERE id = %s', (user_id,))
        connection.commit()
        connection.close()

    await asyncio.to_thread(sync_set_mod)
    await message.answer(f"üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ç–µ–ø–µ—Ä—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä (—Ä–∞–Ω–≥ 26).")

# üö´ /banlist ‚Äî –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_banlist(message: types.Message):
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    def sync_get_banlist():
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute('SELECT id, username FROM users WHERE rank = 0')
        banned_users = cursor.fetchall()
        connection.close()
        return banned_users

    banned_users = await asyncio.to_thread(sync_get_banlist)
    count = len(banned_users)
    if count > 0:
        users_list = "\\n".join([f"üÜî {id_} ‚Äî üë§ {username}" for id_, username in banned_users])
        await message.answer(f"üö´ <b>–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({count}):</b>\\n{users_list}", parse_mode="HTML")
    else:
        await message.answer("‚úÖ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# üìú /showlogs ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
async def handle_showlogs(message: types.Message):
    logger.info("‚ö° –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /showlogs")
    try:
        if not await is_creator(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # üîÑ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        with open("log.log", "rb") as raw_file:
            raw_data = raw_file.read()
            result = chardet.detect(raw_data)
            encoding = result['encoding'] or 'utf-8'
            logger.info(f"üî§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {encoding}")
            
        decoded_data = raw_data.decode(encoding, errors='replace')
        lines = decoded_data.splitlines()[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫

        if lines:
            escaped_lines = html.escape("\\n".join(lines))
            chunk_size = 4000
            for i in range(0, len(escaped_lines), chunk_size):
                await message.answer(f"üìú <b>–õ–æ–≥–∏:</b>\\n<pre>{escaped_lines[i:i+chunk_size]}</pre>", parse_mode="HTML")
        else:
            await message.answer("‚ö†Ô∏è –õ–æ–≥ –ø—É—Å—Ç.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")

# üì¢ /broadcast <message>
async def handle_broadcast(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if not await is_creator(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞—á–∏–Ω–∞—è —Å 9-–≥–æ —Å–∏–º–≤–æ–ª–∞ (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
    broadcast_text = message.text[10:].strip()  # –û—Ç—Ä–µ–∑–∞–µ–º –∫–æ–º–∞–Ω–¥—É /broadcast –∏ –ø—Ä–æ–±–µ–ª

    if not broadcast_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        connection.close()

        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user in users:
            user_id = user[0]
            try:
                await message.bot.send_message(user_id, broadcast_text)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def handle_ticket_list(message: types.Message):
    try:
        if not await is_creator(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        tickets = await execute_db_query(
            "SELECT id, user_id, message FROM tickets WHERE status = 'open'"
        )

        if not tickets:
            await message.answer("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤
        tickets_list = "üì¨ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
        for ticket in tickets:
            ticket_id, user_id, user_message = ticket
            tickets_list += f"üÜî ID: {ticket_id}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\nüìù –í–æ–ø—Ä–æ—Å: {user_message}\n\n"

        await message.answer(tickets_list)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤.")

async def handle_reply_ticket(message: types.Message):
    try:
        if not await is_creator(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=2)  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
        if len(args) < 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /replyticket <ticket_id> <–æ—Ç–≤–µ—Ç>")
            return

        ticket_id = args[1]
        admin_reply = args[2]
        admin_id = message.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await execute_db_query(
            "UPDATE tickets SET status = 'closed', admin_id = %s, admin_reply = %s WHERE id = %s",
            (admin_id, admin_reply, ticket_id)
        )

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç–∏–∫–µ—Ç
        user_id_result = await execute_db_query(
            "SELECT user_id FROM tickets WHERE id = %s",
            (ticket_id,)
        )

        if user_id_result:
            user_id = user_id_result[0][0]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.bot –≤–º–µ—Å—Ç–æ bot
                user_id,
                f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å (—Ç–∏–∫–µ—Ç #{ticket_id}):\n\n{admin_reply}"
            )

        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∏–∫–µ—Ç: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∏–∫–µ—Ç.")

async def handle_close_ticket(message: types.Message):
    try:
        if not await is_creator(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /closeticket <ticket_id>")
            return

        ticket_id = args[1]

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        await execute_db_query(
            "UPDATE tickets SET status = 'closed' WHERE id = %s",
            (ticket_id,)
        )

        await message.answer(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.")

