import logging
import asyncio
import mysql.connector
from aiogram import types
from aiogram.filters import Command
from aiogram import Dispatcher
from aiogram.types import CallbackQuery
from handlers.profile import handle_profile
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.config import API_TOKEN, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
from utils.database import execute_db_query
from config.level import add_experience, notify_level_up
from utils.income_utils import calculate_income_with_bonus
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
prev_keyboard = None

def is_training_completed(user_id: int, training_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ."""
    connection = mysql.connector.connect(
        host=MYSQL_HOST,
        port=MYSQL_PORT,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DATABASE
    )
    cursor = connection.cursor()
    cursor.execute(
        "SELECT completion_time FROM user_educations WHERE user_id = %s AND education_id = %s",
        (user_id, training_id)
    )
    result = cursor.fetchone()
    connection.close()

    if not result:
        return False  # –û–±—É—á–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ
    completion_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S.%f")
    return completion_time <= datetime.now()

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

async def handle_education_list(message: types.Message, user_id=None):
    try:
        user_id = user_id or message.from_user.id

        def sync_get_trainings():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            cursor.execute("SELECT max_training_level FROM users WHERE user_id = %s", (user_id,))
            max_training_level = cursor.fetchone()
            if not max_training_level:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            max_training_level = max_training_level[0]

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ (—É—Ä–æ–≤–µ–Ω—å max_training_level + 1)
            cursor.execute(
                "SELECT id, name, cost, duration_minutes FROM education WHERE required_level = %s",
                (max_training_level + 1,)
            )
            next_training = cursor.fetchone()
            connection.close()
            return next_training

        next_training = await asyncio.to_thread(sync_get_trainings)

        if next_training:
            training_id, name, cost, duration_minutes = next_training
            text = (
                "üìö –°–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:\n\n"
                f"{training_id}. {name}\n\n"  # ID –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}üíµ\n\n"
                f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω."
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìö –ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ")],
                    [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                    [KeyboardButton(text="üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")],
                    [KeyboardButton(text="‚Äº –ü–æ–º–æ—â—å")]
                ],
                resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
            )

            await message.answer(text, reply_markup=keyboard)
        else:
            text = "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è."
            await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—É—á–µ–Ω–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—É—á–µ–Ω–∏–π.")

async def handle_start_education_input(message: types.Message):
    try:
        training_id = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await handle_start_education(message, training_id)  # –ü–µ—Ä–µ–¥–∞–µ–º message –∏ training_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è.")


async def handle_start_education(message: types.Message, training_id: int):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await execute_db_query(
            "SELECT id FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not user_data:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            await handle_education_list(message)
            return

        user_db_id = user_data[0][0]  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏
        training = await execute_db_query(
            "SELECT cost, duration_minutes, required_level FROM education WHERE id = %s",
            (training_id,)
        )
        if not training:
            await message.answer("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await handle_education_list(message)
            return

        cost, duration_minutes, required_level = training[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_level = await execute_db_query(
            "SELECT level FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not user_level:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_education_list(message)
            return

        user_level = user_level[0][0]
        if user_level < required_level:
            await message.answer(f"‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {required_level}. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}.")
            await handle_education_list(message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        max_training_level = await execute_db_query(
            "SELECT max_training_level FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not max_training_level:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_education_list(message)
            return

        max_training_level = max_training_level[0][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–≤–µ–Ω max_training_level + 1
        if required_level != max_training_level + 1:
            await message.answer(f"‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {max_training_level + 1}.")
            await handle_education_list(message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        active_training = await execute_db_query(
            "SELECT completion_time FROM user_educations WHERE user_id = %s AND completion_time > %s",
            (user_db_id, datetime.now())
        )

        if active_training:
            try:
                completion_time = active_training[0][0]  # completion_time —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è datetime
                remaining_time = completion_time - datetime.now()
                remaining_minutes = int(remaining_time.total_seconds() // 60)
                await message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–ª–æ—Å—å {remaining_minutes} –º–∏–Ω.")
                await handle_education_list(message)
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: {e}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balance = await execute_db_query(
            "SELECT balance FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not user_balance:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await handle_education_list(message)
            return

        user_balance = user_balance[0][0]
        if user_balance < cost:
            await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.")
            await handle_education_list(message)
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        completion_time = datetime.now() + timedelta(minutes=duration_minutes)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—É—á–µ–Ω–∏—è
        existing_training = await execute_db_query(
            "SELECT * FROM user_educations WHERE user_id = %s AND education_id = %s",
            (user_db_id, training_id)
        )

        if existing_training:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            await execute_db_query(
                '''
                UPDATE user_educations 
                SET completion_time = %s 
                WHERE user_id = %s AND education_id = %s
                ''',
                (completion_time, user_db_id, training_id)
            )
        else:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await execute_db_query(
                '''
                INSERT INTO user_educations 
                (user_id, education_id, completion_time) 
                VALUES (%s, %s, %s)
                ''',
                (user_db_id, training_id, completion_time)
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        await execute_db_query(
            "UPDATE users SET max_training_level = %s WHERE user_id = %s",
            (required_level, user_id)
        )

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ
        await execute_db_query(
            "UPDATE users SET balance = balance - %s WHERE user_id = %s",
            (cost, user_id)
        )

        await message.answer(f"üéì –í—ã –Ω–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {required_level}! –û–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {duration_minutes} –º–∏–Ω—É—Ç.")
        await handle_education_list(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è.")
        await handle_education_list(message)

def format_time(hours: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã."""
    total_seconds = int(hours * 3600)
    h = total_seconds // 3600
    m = (total_seconds % 3600) // 60
    s = total_seconds % 60
    return f"{h} —á–∞—Å{'–∞' if 1 < h % 10 < 5 and not 11 <= h % 100 <= 14 else '' if h == 1 else '–æ–≤'}, {m} –º–∏–Ω—É—Ç, {s} —Å–µ–∫—É–Ω–¥"


async def handle_my_businesses(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ—á–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±–æ—Ä–∞."""
    try:
        user_id = message.from_user.id

        def sync_get_businesses():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute("SELECT id FROM users WHERE user_id = %s", (user_id,))
            user_db_id_result = cursor.fetchone()
            if not user_db_id_result:
                connection.close()
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            user_db_id = user_db_id_result[0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT b.name, ub.level, b.base_income, ub.last_collected_income, 
                       b.base_cost, b.upgrade_cost_multiplier, b.max_accumulation_time
                FROM user_businesses ub
                JOIN businesses b ON ub.business_id = b.id
                WHERE ub.user_id = %s
            ''', (user_db_id,))
            businesses = cursor.fetchall()
            connection.close()
            return businesses

        businesses = await asyncio.to_thread(sync_get_businesses)

        if not businesses:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤.")
            return

        name, level, base_income, last_collected_income, base_cost, upgrade_cost_multiplier, max_accumulation_time = businesses[0]
        income_per_hour = base_income * level  # –î–æ—Ö–æ–¥ –≤ —á–∞—Å —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        if last_collected_income:
            time_since_last_collection = datetime.now() - last_collected_income
            hours_since_last_collection = time_since_last_collection.total_seconds() / 3600

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–æ max_accumulation_time
            hours_since_last_collection = min(hours_since_last_collection, max_accumulation_time)
            accumulated_income = int(income_per_hour * hours_since_last_collection)
        else:
            accumulated_income = 0
            hours_since_last_collection = 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞
        if last_collected_income:
            time_until_max_accumulation = max_accumulation_time - hours_since_last_collection
            if time_until_max_accumulation > 0:
                time_until_max_accumulation_str = format_time(time_until_max_accumulation)
            else:
                time_until_max_accumulation_str = "‚úÖ –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å"
        else:
            time_until_max_accumulation_str = "‚úÖ –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞
        total_cost = base_cost
        for lvl in range(1, level):
            total_cost += int(base_cost * (upgrade_cost_multiplier ** (lvl - 1)))
        sell_price = int(total_cost * 0.6)  # 60% –æ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å
        can_upgrade = level < 7  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∏–∑–Ω–µ—Å–∞ ‚Äî 7
        upgrade_info = "‚úÖ –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å" if can_upgrade else "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"

        text = (
            "üè¢ <b>–í–∞—à –±–∏–∑–Ω–µ—Å:</b>\n\n"
            f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"üíµ <b>–î–æ—Ö–æ–¥ –≤ —á–∞—Å:</b> {income_per_hour}üíµ\n"
            f"üí∞ <b>–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤ –∫–∞—Å—Å–µ:</b> {accumulated_income}üíµ\n"
            f"‚è≥ <b>–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Å—Å—ã:</b> {time_until_max_accumulation_str}\n"
            f"üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:</b> {sell_price}üíµ\n"
            f"‚¨ÜÔ∏è <b>–£–ª—É—á—à–µ–Ω–∏–µ:</b> {upgrade_info}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å")],
                [KeyboardButton(text="‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å")],
                [KeyboardButton(text="üí∏ –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å")],
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="‚Äº –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        )

        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤.")


async def handle_collect_income(message: types.Message):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–æ—Ö–æ–¥ —Å –±–∏–∑–Ω–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –±–æ–Ω—É—Å –≥–æ—Ä–æ–¥–∞ –∏ –ª–∏–º–∏—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞."""
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥.")

        def sync_collect_income():
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute("SELECT id FROM users WHERE user_id = %s", (user_id,))
            user_db_id_result = cursor.fetchone()
            if not user_db_id_result:
                connection.close()
                return 0, 0  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            user_db_id = user_db_id_result[0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–æ–≤, –≤–∫–ª—é—á–∞—è max_accumulation_time
            cursor.execute(''' 
                SELECT ub.business_id, b.base_income, ub.level, ub.last_collected_income, b.max_accumulation_time 
                FROM user_businesses ub 
                JOIN businesses b ON ub.business_id = b.id 
                WHERE ub.user_id = %s 
            ''', (user_db_id,))
            businesses = cursor.fetchall()

            if not businesses:
                connection.close()
                return 0, 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: total_income –∏ total_experience

            total_income = 0
            total_experience = 0.03  # –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ —Å–±–æ—Ä –¥–æ—Ö–æ–¥–∞

            for business_id, base_income, level, last_collected, max_accumulation_time in businesses:
                income = base_income * level

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
                if not last_collected:
                    cursor.execute(
                        "SELECT purchase_time FROM user_businesses WHERE user_id = %s AND business_id = %s",
                        (user_db_id, business_id)
                    )
                    purchase_time_result = cursor.fetchone()
                    if not purchase_time_result:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ purchase_time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

                    purchase_time = purchase_time_result[0]
                    if isinstance(purchase_time, str):
                        reference_time = datetime.strptime(purchase_time, "%Y-%m-%d %H:%M:%S.%f")
                    else:
                        reference_time = purchase_time  # –£–∂–µ datetime
                else:
                    if isinstance(last_collected, str):
                        reference_time = datetime.strptime(last_collected, "%Y-%m-%d %H:%M:%S.%f")
                    else:
                        reference_time = last_collected  # –£–∂–µ datetime

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
                time_since_last_collection = datetime.now() - reference_time
                hours_since_last_collection = time_since_last_collection.total_seconds() / 3600

                # ‚è≥ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –ø–æ max_accumulation_time
                hours_to_collect = min(hours_since_last_collection, max_accumulation_time)
                income *= hours_to_collect

                # –û–ø—ã—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–º—É –¥–æ—Ö–æ–¥—É
                experience_gained = int(5 * hours_to_collect * level)
                total_experience += experience_gained
                total_income += income

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
                cursor.execute(
                    "UPDATE user_businesses SET last_collected_income = %s WHERE user_id = %s AND business_id = %s",
                    (datetime.now(), user_db_id, business_id)
                )

            connection.commit()
            connection.close()
            return total_income, total_experience  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä –¥–æ—Ö–æ–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        total_income, total_experience = await asyncio.to_thread(sync_collect_income)

        # –ï—Å–ª–∏ –¥–æ—Ö–æ–¥ —Ä–∞–≤–µ–Ω 0, –∑–Ω–∞—á–∏—Ç, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤
        if total_income == 0:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤.")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –≥–æ—Ä–æ–¥–∞
        bonus_percent = calculate_income_with_bonus(user_id, total_income)
        total_income_with_bonus = total_income + (total_income * bonus_percent / 100)

        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        connection = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cursor = connection.cursor()
        cursor.execute(
            "UPDATE users SET balance = balance + %s WHERE user_id = %s",
            (total_income_with_bonus, user_id)
        )
        connection.commit()
        connection.close()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        new_level, remaining_experience, level_increased = await add_experience(user_id, total_experience)

        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_message = f"üí∞ –í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Ö–æ–¥: {int(total_income_with_bonus)}üíµ (—Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–∞).\n"
        result_message += f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ {total_experience} –æ–ø—ã—Ç–∞.\n"
        if level_increased:
            result_message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_level}!"

        await message.answer(result_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞ —Å –±–∏–∑–Ω–µ—Å–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞.")


async def handle_businesses(message: types.Message):
    global prev_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        user_id = message.from_user.id

        def sync_get_businesses():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            cursor.execute(
                "SELECT level, max_training_level FROM users WHERE user_id = %s",
                (user_id,)
            )
            user_data = cursor.fetchone()
            if not user_data:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            user_level, max_training_level = user_data

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
            cursor.execute('''
                SELECT id, name, base_cost, level_required, required_education_id
                FROM businesses
                WHERE level_required <= %s AND (required_education_id IS NULL OR required_education_id <= %s)
            ''', (user_level, max_training_level))
            businesses = cursor.fetchall()
            connection.close()
            return businesses

        businesses = await asyncio.to_thread(sync_get_businesses)

        if businesses:
            text = "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã:\n" + "\n".join(
                [f"{idx+1}. {name} ‚Äî üíµ {base_cost} (–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: {level_required})\n"
                 for idx, (id_, name, base_cost, level_required, _) in enumerate(businesses)]
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üè¢ –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å")],
                    [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
                ],
                resize_keyboard=True
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            prev_keyboard = keyboard

            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤.")

        # handlers/earnings.py
import logging
import asyncio
from aiogram import types
from config.config import API_TOKEN, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
from utils.database import execute_db_query

logger = logging.getLogger(__name__)

async def handle_buy_business(message: types.Message, business_id: int):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        user_exists = await execute_db_query(
            "SELECT id FROM users WHERE user_id = %s",
            (user_id,)
        )
        if not user_exists:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        user_db_id = user_exists[0][0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞
        def sync_buy_business():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±–∏–∑–Ω–µ—Å
            cursor.execute(
                "SELECT business_id FROM user_businesses WHERE user_id = %s",
                (user_db_id,)
            )
            existing_business = cursor.fetchone()

            if existing_business:
                connection.close()
                return "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π."

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
            cursor.execute(
                "SELECT name, base_cost, level_required, required_education_id FROM businesses WHERE id = %s",
                (business_id,)
            )
            business = cursor.fetchone()

            if not business:
                connection.close()
                return "‚ö†Ô∏è –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."

            name, base_cost, level_required, required_education_id = business

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "SELECT level, max_training_level, balance FROM users WHERE id = %s",
                (user_db_id,)
            )
            user_data = cursor.fetchone()

            if not user_data:
                connection.close()
                return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

            user_level, max_training_level, user_balance = user_data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
            if user_level < level_required:
                connection.close()
                return f"‚ö†Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {level_required}. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            if required_education_id and max_training_level < required_education_id:
                connection.close()
                return f"‚ö†Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {required_education_id}."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_balance < base_cost:
                connection.close()
                return "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞."

            # –ü–æ–∫—É–ø–∞–µ–º –±–∏–∑–Ω–µ—Å
            cursor.execute(
                "INSERT INTO user_businesses (user_id, business_id, level, last_collected_income) VALUES (%s, %s, 1, %s)",
                (user_db_id, business_id, datetime.now())
            )

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            cursor.execute(
                "UPDATE users SET balance = balance - %s WHERE id = %s",
                (base_cost, user_db_id)
            )

            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—ç—à–±–µ–∫ (2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞)
            cashback_amount = int(base_cost * 0.02)  # 2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞
            cursor.execute(
                "UPDATE users SET cashback = cashback + %s WHERE id = %s",
                (cashback_amount, user_db_id)
            )

            connection.commit()
            connection.close()
            return f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å ¬´{name}¬ª!"

        result = await asyncio.to_thread(sync_buy_business)
        await message.answer(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–∑–Ω–µ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–∑–Ω–µ—Å–∞.")


async def handle_buy_business_input(message: types.Message):
    global prev_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç—É "b_–Ω–æ–º–µ—Ä"
        if not message.text.startswith("b_"):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: b_–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, b_1)")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–∏–∑–Ω–µ—Å–∞
        try:
            business_id_str = message.text.split("_")[1]
            business_id = int(business_id_str)
        except (IndexError, ValueError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: b_1", reply_markup=prev_keyboard)
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞
        result = await handle_buy_business(message, business_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if prev_keyboard:
            await message.answer(result, reply_markup=prev_keyboard)
        else:
            await message.answer(result)  # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ—ë

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=prev_keyboard)


async def handle_upgrade_business(message: types.Message):
    """–£–ª—É—á—à–∞–µ—Ç –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = message.from_user.id

        def sync_upgrade_business():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute("SELECT id FROM users WHERE user_id = %s", (user_id,))
            user_db_id_result = cursor.fetchone()
            if not user_db_id_result:
                connection.close()
                return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start."

            user_db_id = user_db_id_result[0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT ub.business_id, ub.level, b.base_income, b.upgrade_cost_multiplier
                FROM user_businesses ub
                JOIN businesses b ON ub.business_id = b.id
                WHERE ub.user_id = %s
            ''', (user_db_id,))
            business = cursor.fetchone()

            if not business:
                connection.close()
                return "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤."

            business_id, current_level, base_income, upgrade_cost_multiplier = business

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å
            if current_level >= 7:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∏–∑–Ω–µ—Å–∞ ‚Äî 7
                connection.close()
                return "‚ùå –í–∞—à –±–∏–∑–Ω–µ—Å —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è."

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
            upgrade_cost = int(base_income * (upgrade_cost_multiplier ** (current_level - 1)))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "SELECT balance FROM users WHERE id = %s",
                (user_db_id,)
            )
            user_balance = cursor.fetchone()[0]

            if user_balance < upgrade_cost:
                connection.close()
                return f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è: {upgrade_cost}üíµ."

            # –£–ª—É—á—à–∞–µ–º –±–∏–∑–Ω–µ—Å
            new_level = current_level + 1
            cursor.execute(
                "UPDATE user_businesses SET level = %s WHERE user_id = %s AND business_id = %s",
                (new_level, user_db_id, business_id)
            )

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            cursor.execute(
                "UPDATE users SET balance = balance - %s WHERE id = %s",
                (upgrade_cost, user_db_id)
            )

            connection.commit()
            connection.close()
            return f"üéâ –í—ã —É–ª—É—á—à–∏–ª–∏ –±–∏–∑–Ω–µ—Å –¥–æ —É—Ä–æ–≤–Ω—è {new_level}! –ù–æ–≤—ã–π –¥–æ—Ö–æ–¥: {base_income * new_level}üíµ/—á."

        result = await asyncio.to_thread(sync_upgrade_business)
        await message.answer(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞.")

async def handle_sell_business(message: types.Message):
    """–ü—Ä–æ–¥–∞–µ—Ç –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å.")

        def sync_sell_business():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute("SELECT id FROM users WHERE user_id = %s", (user_id,))
            user_db_id_result = cursor.fetchone()
            if not user_db_id_result:
                connection.close()
                return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start."

            user_db_id = user_db_id_result[0]  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT ub.business_id, ub.level, b.base_cost, b.upgrade_cost_multiplier
                FROM user_businesses ub
                JOIN businesses b ON ub.business_id = b.id
                WHERE ub.user_id = %s
            ''', (user_db_id,))
            business = cursor.fetchone()

            if not business:
                connection.close()
                return "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤."

            business_id, current_level, base_cost, upgrade_cost_multiplier = business
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –±–∏–∑–Ω–µ—Å–∞: {business}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞ (–ø–æ–∫—É–ø–∫–∞ + —É–ª—É—á—à–µ–Ω–∏—è)
            total_cost = base_cost
            for level in range(1, current_level):
                total_cost += int(base_cost * (upgrade_cost_multiplier ** (level - 1)))

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (60% –æ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
            sell_price = int(total_cost * 0.6)

            # –£–¥–∞–ª—è–µ–º –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "DELETE FROM user_businesses WHERE user_id = %s AND business_id = %s",
                (user_db_id, business_id)
            )

            # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É
            cursor.execute(
                "UPDATE users SET balance = balance + %s WHERE id = %s",
                (sell_price, user_db_id)
            )

            connection.commit()
            connection.close()
            return f"üí∞ –í—ã –ø—Ä–æ–¥–∞–ª–∏ –±–∏–∑–Ω–µ—Å –∑–∞ {sell_price}üíµ."

        result = await asyncio.to_thread(sync_sell_business)
        await message.answer(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –±–∏–∑–Ω–µ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –±–∏–∑–Ω–µ—Å–∞.")