import asyncio
import logging
import mysql.connector
from datetime import datetime, timedelta
from config.config import API_TOKEN, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE

logger = logging.getLogger(__name__)

async def handle_daily(message):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å —Ä–∞—Å—Ç—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    try:
        user_id = message.from_user.id
        today = datetime.now().date()

        def sync_get_and_update_bonus():
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()

            cursor.execute(
                'SELECT last_daily, daily_streak FROM users WHERE user_id = %s',
                (user_id,))
            result = cursor.fetchone()

            if result:
                last_daily, daily_streak = result
                if last_daily == today:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å today –Ω–∞–ø—Ä—è–º—É—é
                    connection.close()
                    return None, None, daily_streak  # –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è money_bonus –∏ exp_bonus

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ —Å–µ—Ä–∏—è
                if last_daily:
                    if isinstance(last_daily, str):  # –ï—Å–ª–∏ last_daily - —Å—Ç—Ä–æ–∫–∞
                        last_date = datetime.strptime(last_daily, "%Y-%m-%d").date()
                    else:  # –ï—Å–ª–∏ last_daily - —É–∂–µ datetime.date
                        last_date = last_daily

                    if (today - last_date).days > 1:
                        daily_streak = 1  # –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏
                    elif (today - last_date).days == 1:
                        daily_streak += 1  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
                    else:
                        daily_streak = daily_streak  # –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è
                else:
                    daily_streak = 1  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –¥–µ–Ω–µ–≥
                money_step = 50  # –®–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
                money_bonus = (daily_streak // 10) * 500 + (daily_streak % 10) * (money_step * (daily_streak // 10 + 1))

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –æ–ø—ã—Ç–∞
                exp_step = 5  # –®–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ–ø—ã—Ç–∞
                exp_bonus = (daily_streak // 10) * 50 + (daily_streak % 10) * (exp_step * (daily_streak // 10 + 1))

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute(
                    'UPDATE users SET balance = balance + %s, experience = experience + %s, last_daily = %s, daily_streak = %s WHERE user_id = %s',
                    (money_bonus, exp_bonus, today, daily_streak, user_id)
                )
                connection.commit()
                connection.close()
                return money_bonus, exp_bonus, daily_streak
            else:
                connection.close()
                return None, None, 0  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è money_bonus –∏ exp_bonus

        money_bonus, exp_bonus, streak = await asyncio.to_thread(sync_get_and_update_bonus)

        if money_bonus is None and exp_bonus is None:
            await message.answer("üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å!")
        else:
            await message.answer(
                f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {money_bonus}üíµ –∏ {exp_bonus} –æ–ø—ã—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤—Ö–æ–¥!\n"
                f"üìÖ –°–µ—Ä–∏—è –¥–Ω–µ–π: {streak}."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞.")