from aiogram import types
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.dispatcher.event.bases import SkipHandler  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SkipHandler –≤–º–µ—Å—Ç–æ StopPropagation
from datetime import datetime
from collections import defaultdict
from config.rate_limits import RATE_LIMITS


class RateLimiterMiddleware(BaseMiddleware):
    def __init__(self):
        super().__init__()
        self.user_data = defaultdict(lambda: defaultdict(lambda: {
            "count": 0,
            "last_update": datetime.min
        }))

    async def __call__(self, handler, event, data: dict):
        user_id = None
        cmd = None

        # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(event, types.Message):
            if not event.text:
                return await handler(event, data)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
            user_id = event.from_user.id
            cmd = event.text.split()[0]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery
        elif isinstance(event, types.CallbackQuery):
            if not event.data:
                return await handler(event, data)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç callback data
            user_id = event.from_user.id
            cmd = event.data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∞–Ω–¥—ã

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not user_id or not cmd:
            return await handler(event, data)

        # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/" –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(event, types.Message) and not cmd.startswith("/"):
            return await handler(event, data)

        # üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        limit_config = RATE_LIMITS.get(cmd, RATE_LIMITS["default"])
        limit = limit_config["limit"]
        interval = limit_config["interval"]

        now = datetime.now()
        user_entry = self.user_data[user_id][cmd]

        # üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏—Å—Ç–µ–∫
        if (now - user_entry["last_update"]).total_seconds() > interval:
            user_entry["count"] = 0
            user_entry["last_update"] = now

        # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        if user_entry["count"] >= limit:
            warning_text = (
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!\n"
                f"–õ–∏–º–∏—Ç: {limit} —Ä–∞–∑(–∞) –≤ {interval} —Å–µ–∫—É–Ω–¥."
            )
            if isinstance(event, types.Message):
                await event.answer(warning_text)
            elif isinstance(event, types.CallbackQuery):
                await event.answer(warning_text, show_alert=True)

            raise SkipHandler()  # ‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

        user_entry["count"] += 1
        return await handler(event, data)
