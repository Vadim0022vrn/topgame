# background_tasks.py
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from config.config import MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
from utils.database import execute_db_query
from config.level import get_required_experience, add_experience, notify_level_up
import mysql.connector
import logging

logger = logging.getLogger(__name__)

async def check_completed_trainings(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–π."""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π —Å user_id –∏–∑ Telegram
            with mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            ) as connection:
                with connection.cursor() as cursor:
                    cursor.execute(
                        """
                        SELECT u.user_id, ue.education_id 
                        FROM user_educations ue
                        JOIN users u ON ue.user_id = u.id
                        WHERE ue.completion_time <= %s
                        """,
                        (datetime.now(),)
                    )
                    completed_trainings = cursor.fetchall()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
            for user_id, education_id in completed_trainings:
                try:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—É—á–µ–Ω–∏—è {education_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –æ–ø—ã—Ç
                    with mysql.connector.connect(
                        host=MYSQL_HOST,
                        port=MYSQL_PORT,
                        user=MYSQL_USER,
                        password=MYSQL_PASSWORD,
                        database=MYSQL_DATABASE
                    ) as connection:
                        with connection.cursor() as cursor:
                            cursor.execute(
                                "SELECT name, experience_reward FROM education WHERE id = %s",
                                (education_id,)
                            )
                            training_name, experience_reward = cursor.fetchone()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"üéì –í–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ ¬´{training_name}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                                 f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ {experience_reward} –æ–ø—ã—Ç–∞!"
                        )

                        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await add_experience(user_id, experience_reward)

                        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–±—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        with mysql.connector.connect(
                            host=MYSQL_HOST,
                            port=MYSQL_PORT,
                            user=MYSQL_USER,
                            password=MYSQL_PASSWORD,
                            database=MYSQL_DATABASE
                        ) as connection:
                            with connection.cursor() as cursor:
                                cursor.execute(
                                    "DELETE FROM user_educations WHERE user_id = (SELECT id FROM users WHERE user_id = %s) AND education_id = %s",
                                    (user_id, education_id)
                                )
                                connection.commit()
                                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –æ–± –æ–±—É—á–µ–Ω–∏–∏ {education_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞.")

                    except Exception as e:
                        if "chat not found" in str(e):
                            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                        else:
                            raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(60)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


async def check_business_accumulation(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤."""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∫–∞—Å—Å–∞
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()
            cursor.execute(''' 
                SELECT u.user_id, b.name, ub.last_collected_income, b.max_accumulation_time
                FROM user_businesses ub
                JOIN businesses b ON ub.business_id = b.id
                JOIN users u ON ub.user_id = u.id
                WHERE ub.last_collected_income IS NOT NULL
            ''')
            businesses = cursor.fetchall()
            cursor.close()
            connection.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user_id, business_name, last_collected_income, max_accumulation_time in businesses:
                try:
                    # –ï—Å–ª–∏ last_collected_income —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    last_collected_time = last_collected_income
                    time_since_last_collection = datetime.now() - last_collected_time

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
                    if time_since_last_collection.total_seconds() >= max_accumulation_time * 3600:
                        await bot.send_message(
                            chat_id=user_id,  # –¢–µ–ø–µ—Ä—å user_id ‚Äî —ç—Ç–æ Telegram ID
                            text=f"‚ö†Ô∏è –í–∞—à –±–∏–∑–Ω–µ—Å ¬´{business_name}¬ª –Ω–∞–∫–æ–ø–∏–ª –ø–æ–ª–Ω—É—é –∫–∞—Å—Å—É!\n"
                                 f"–°–æ–±–µ—Ä–∏—Ç–µ –¥–æ—Ö–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ."
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(120)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


async def check_job_accumulation(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã —Å —Ä–∞–±–æ—Ç—ã."""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()
            cursor.execute('''
                SELECT u.user_id, j.name, uj.last_income_collection
                FROM user_jobs uj
                JOIN jobs j ON uj.job_id = j.id
                JOIN users u ON uj.user_id = u.id
                WHERE uj.last_income_collection IS NOT NULL
            ''')
            jobs = cursor.fetchall()
            cursor.close()
            connection.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user_id, job_name, last_income_collection in jobs:
                try:
                    # –ï—Å–ª–∏ last_income_collection —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    last_collection_time = last_income_collection
                    time_since_last_collection = datetime.now() - last_collection_time

                    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã (5 —á–∞—Å–æ–≤)
                    max_accumulation_time = timedelta(hours=5)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
                    if time_since_last_collection >= max_accumulation_time:
                        await bot.send_message(
                            chat_id=user_id,  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            text=f"‚ö†Ô∏è –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ¬´{job_name}¬ª –Ω–∞–∫–æ–ø–∏–ª–∞ –ø–æ–ª–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É!\n"
                                 f"–°–æ–±–µ—Ä–∏—Ç–µ –¥–æ—Ö–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ."
                        )
                except Exception as e:
                    if "chat not found" in str(e):
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(240)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(120)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


async def check_investments(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π."""
    while True:
        try:

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            connection = mysql.connector.connect(
                host=MYSQL_HOST,
                port=MYSQL_PORT,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DATABASE
            )
            cursor = connection.cursor()
            cursor.execute('''
                SELECT user_id, amount, profit
                FROM investments
                WHERE end_time <= NOW()
            ''')
            investments = cursor.fetchall()
            cursor.close()
            connection.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user_id, amount, profit in investments:
                try:
                    await bot.send_message(
                        chat_id=user_id,  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        text=f"‚ö†Ô∏è –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –Ω–∞ —Å—É–º–º—É {amount} üí∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                             f"–ü—Ä–∏–±—ã–ª—å: {profit} üí∞. –°–æ–±–µ—Ä–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /claiminvest."
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                except Exception as e:
                    if "chat not found" in str(e):
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(120)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π



async def check_level_up(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —É—Ä–æ–≤–Ω–µ–º –∏ –æ–ø—ã—Ç–æ–º
                connection = mysql.connector.connect(
                    host=MYSQL_HOST,
                    port=MYSQL_PORT,
                    user=MYSQL_USER,
                    password=MYSQL_PASSWORD,
                    database=MYSQL_DATABASE
                )
                cursor = connection.cursor()
                cursor.execute('''
                    SELECT user_id, level, experience
                    FROM users
                ''')
                users = cursor.fetchall()
                cursor.close()
                connection.close()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for user_id, level, experience in users:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                        required_experience = get_required_experience(level)

                        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É
                        if experience >= required_experience:
                            # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            new_level, remaining_experience, level_increased = await add_experience(user_id, 0)
                            if level_increased:
                                await notify_level_up(user_id, new_level)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(120)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞)
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_level_up –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_level_up –ø—Ä–µ—Ä–≤–∞–Ω–∞.")