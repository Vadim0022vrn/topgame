from config.girls import GIRLS
from config.clothes import CLOTHES
import mysql.connector
import logging
from config.config import API_TOKEN, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
from datetime import datetime
from utils.database import execute_db_query
from aiogram import Bot
from config.config import API_TOKEN
from utils.girls_utils import calculate_girl_bonus


logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
INITIAL_LEVEL = 1  # –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
INITIAL_EXPERIENCE = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç
BASE_EXPERIENCE_REQUIRED = 150  # –û–ø—ã—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å 1 –Ω–∞ 2 —É—Ä–æ–≤–µ–Ω—å
EXPERIENCE_MULTIPLIER = 1.1  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è


# –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
LEVEL_UNLOCKS = {
    3: "üè¢ –ë–∏–∑–Ω–µ—Å—ã: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å–∞–º–∏!",
    5: "üöó –ù–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏: –î–æ—Å—Ç—É–ø–Ω—ã –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ –∏ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.",
    10: "üõ• –Ø—Ö—Ç—ã: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —è—Ö—Ç—É!",
    15: "üèù –û—Å—Ç—Ä–æ–≤–∞: –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —á–∞—Å—Ç–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞ –∏ —Å—Ç–∞–Ω—å—Ç–µ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.",
    20: "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç—ã: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —á–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç.",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–µ–≤—É—à–µ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
LEVEL_TO_GIRL = {
    5: 1,   # –ù–∞ 5 —É—Ä–æ–≤–Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–µ–≤—É—à–∫–∞ —Å ID 1
    10: 2,  # –ù–∞ 10 —É—Ä–æ–≤–Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–µ–≤—É—à–∫–∞ —Å ID 2
    15: 3,  # –ù–∞ 15 —É—Ä–æ–≤–Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–µ–≤—É—à–∫–∞ —Å ID 3
    20: 4,  # –ù–∞ 20 —É—Ä–æ–≤–Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–µ–≤—É—à–∫–∞ —Å ID 4
    25: 5,  # –ù–∞ 25 —É—Ä–æ–≤–Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–µ–≤—É—à–∫–∞ —Å ID 5
    30: 6,  # –ù–∞ 30 —É—Ä–æ–≤–Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–µ–≤—É—à–∫–∞ —Å ID 6
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏ –∏ ID –¥–µ–≤—É—à–µ–∫ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def get_required_experience(level: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.
    :param level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.
    """
    if level < INITIAL_LEVEL:
        raise ValueError("–£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ.")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
    if level == INITIAL_LEVEL:
        return BASE_EXPERIENCE_REQUIRED
    else:
        return int(BASE_EXPERIENCE_REQUIRED * (EXPERIENCE_MULTIPLIER ** (level - 1)))

def get_user_level_and_experience(user_id: int) -> tuple[int, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç.
    """
    connection = mysql.connector.connect(
        host=MYSQL_HOST,
        port=MYSQL_PORT,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DATABASE
    )
    cursor = connection.cursor()

    cursor.execute('SELECT level, experience FROM users WHERE user_id = %s', (user_id,))
    result = cursor.fetchone()
    connection.close()

    if not result:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    level, experience = result
    return level, experience

async def add_experience(user_id: int, amount: int) -> tuple[int, int, bool]:
    connection = mysql.connector.connect(
        host=MYSQL_HOST,
        port=MYSQL_PORT,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DATABASE
    )
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç, ID –¥–µ–≤—É—à–∫–∏ –∏ ID –æ–¥–µ–∂–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT level, experience, girlfriend, clothes FROM users WHERE user_id = %s', (user_id,))
    level, experience, girlfriend_id, clothes_id = cursor.fetchone()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –¥–µ–≤—É—à–∫–∏
    girl_bonus = calculate_girl_bonus(girlfriend_id)
    experience_bonus = girl_bonus["experience"]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –æ—Ç –æ–¥–µ–∂–¥—ã
    clothes_bonus = 0.0
    if clothes_id in CLOTHES:
        clothes_bonus = CLOTHES[clothes_id]["bonus"].get("experience", 0.0)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –æ–ø—ã—Ç–∞ –æ—Ç –æ–¥–µ–∂–¥—ã

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–ø—ã—Ç —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –æ—Ç –¥–µ–≤—É—à–∫–∏ –∏ –æ–¥–µ–∂–¥—ã
    total_experience = experience + amount * (1 + experience_bonus + clothes_bonus)

    required_experience = get_required_experience(level)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
    new_level = level
    level_increased = False
    while total_experience >= required_experience:
        total_experience -= required_experience
        new_level += 1
        required_experience = get_required_experience(new_level)
        level_increased = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ —É—Ä–æ–≤–Ω—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –¥–µ–≤—É—à–∫—É
        if new_level in LEVEL_TO_GIRL:
            girl_id = LEVEL_TO_GIRL[new_level]
            cursor.execute('UPDATE users SET girlfriend = %s WHERE user_id = %s', (girl_id, user_id))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–µ–≤—É—à–∫—É {girl_id} –Ω–∞ —É—Ä–æ–≤–Ω–µ {new_level}.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('UPDATE users SET level = %s, experience = %s WHERE user_id = %s', (new_level, total_experience, user_id))
    connection.commit()

    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥
    if level_increased:
        await update_rank_based_on_level(user_id, new_level)

    cursor.close()
    connection.close()

    return new_level, total_experience, level_increased

async def notify_level_up(user_id: int, new_level: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏ –≤—ã–¥–∞—á–µ –¥–µ–≤—É—à–∫–∏.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param new_level: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    bot = Bot(token=API_TOKEN)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if new_level in LEVEL_UNLOCKS:
            message_text += f"\n{LEVEL_UNLOCKS[new_level]}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ –Ω–æ–≤—É—é –¥–µ–≤—É—à–∫—É
        if new_level in LEVEL_TO_GIRL:
            girl_id = LEVEL_TO_GIRL[new_level]
            girl_name = GIRLS[girl_id]["name"]
            message_text += f"\n\nüíñ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–µ–≤—É—à–∫–∞: {girl_name}!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=message_text
        )
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()

def calculate_level_progress(user_id: int) -> tuple[int, int, float]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    level, experience = get_user_level_and_experience(user_id)
    required_experience = get_required_experience(level)
    progress_percent = (experience / required_experience) * 100
    return level, required_experience, progress_percent

async def update_rank_based_on_level(user_id: int, new_level: int):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è –∏ —Ä–∞–Ω–≥–∞
    level_to_rank = {
        10: 2,  # –ù–∞ 10 —É—Ä–æ–≤–Ω–µ —Ä–∞–Ω–≥ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ 2
        15: 3,  # –ù–∞ 15 —É—Ä–æ–≤–Ω–µ —Ä–∞–Ω–≥ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ 3
        20: 4,  # –ù–∞ 20 —É—Ä–æ–≤–Ω–µ —Ä–∞–Ω–≥ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ 4
        30: 5,  # –ù–∞ 30 —É—Ä–æ–≤–Ω–µ —Ä–∞–Ω–≥ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ 5
        40: 6,  # –ù–∞ 40 —É—Ä–æ–≤–Ω–µ —Ä–∞–Ω–≥ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ 6
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏ –∏ —Ä–∞–Ω–≥–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    connection = mysql.connector.connect(
        host=MYSQL_HOST,
        port=MYSQL_PORT,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DATABASE
    )
    cursor = connection.cursor()
    cursor.execute('SELECT rank FROM users WHERE user_id = %s', (user_id,))
    current_rank = cursor.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
    new_rank = current_rank
    for level, rank in level_to_rank.items():
        if new_level >= level and rank > current_rank:
            new_rank = rank

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–Ω–≥ –¥–æ 20 (—Ä–∞–Ω–≥–∏ —Å 21 –ø–æ 30 ‚Äî –¥–æ–Ω–∞—Ç–Ω—ã–µ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ)
    if new_rank > 20:
        new_rank = 20

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if new_rank != current_rank:
        cursor.execute('UPDATE users SET rank = %s WHERE user_id = %s', (new_rank, user_id))
        connection.commit()
        logger.info(f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_rank} (—É—Ä–æ–≤–µ–Ω—å {new_level}).")

    cursor.close()
    connection.close()
